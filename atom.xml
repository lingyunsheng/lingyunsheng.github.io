<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凌云生的客栈</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lingyunsheng.cn/"/>
  <updated>2020-11-24T01:29:44.052Z</updated>
  <id>http://lingyunsheng.cn/</id>
  
  <author>
    <name>lingyunsheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端开发常见的问题</title>
    <link href="http://lingyunsheng.cn/archives/18938.html"/>
    <id>http://lingyunsheng.cn/archives/18938.html</id>
    <published>2020-11-24T00:48:03.000Z</published>
    <updated>2020-11-24T01:29:44.052Z</updated>
    
    <content type="html"><![CDATA[<ol><li>获取设备的真实开发分辨率（逻辑分辨率）</li></ol><p>移动端适配涉及到以下名词：</p><pre class=" language-bash"><code class="language-bash">CSS像素、物理分辨率、逻辑分辨率、设备像素比、PPI、DPI、DPR、DIP、Vieport</code></pre><p>对于开发来说，了解三个概念</p><ul><li>物理分辨率， 就是设备上标称的分辨率</li><li>逻辑分辨率， 开发时所用的分辨率</li><li>设备像素比，物理分辨率与逻辑分辨率之比</li></ul><p>例如iphone6, 物理分辨率为<strong>750*1334</strong>,<br>逻辑分辨率为 <strong>375*667</strong> , 设备像素比是2，</p><p>打开chrome控制台，切换到device toolbar，选择iphone6可以看到逻辑分辨率</p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba07454a83ca4f33bcae6d426a26ae3f~tplv-k3u1fbpfcp-zoom-1.image"><p>UI设计图2倍图、3倍图 就是设备像素比，px需要初一2或者3</p><p><strong>物理分辨率</strong></p><p>如果知道物理分辨率， 可以通过<strong>window.devicePixelRatio</strong>获取设备像素比，然后通过公式算出逻辑分辨率</p><pre class=" language-bash"><code class="language-bash">逻辑分辨率 <span class="token operator">=</span> 物理分辨率 / 设备像素比             物理分辨率 / window.devicePixelRatio</code></pre><p><strong>开发pc页面：设计稿的像素是多少就是写多少，开发移动端就除以设备像素比</strong></p><p><strong>不知道物理分辨率</strong></p><p>当不知道物理分辨率，怎么得到设备的逻辑分辨率呢。 可以获取div的宽高 就是设备的逻辑分辨率</p><pre class=" language-CSS"><code class="language-CSS">.test-div {    position: fixed;    left: 0;    top: 0;    width: 100vw;    height: 100vh;}</code></pre><pre class=" language-ts"><code class="language-ts">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'test-div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientWidth <span class="token comment" spellcheck="true">// 宽</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'test-div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>clientHeight <span class="token comment" spellcheck="true">// 高</span></code></pre><p>举例： 华为m5平板 华为m5 pro平板， 大小10.1寸和10.8寸</p><p>用这种方法获取逻辑分辨率960<em>600、 1024</em>640</p><p>为什么不使用 window.screen.width 或 window.screen.height 来获取逻辑分辨率呢？请看 MDN 的解释：</p><blockquote><p>注意，该属性返回的高度值并不是全部对浏览器窗口可用。小工具（Widgets），如任务栏或其他特殊的程序窗口，可能会减少浏览器窗口和其他应用程序能够利用的空间。 会被其他小程序占用空间，返回来的高度会被其他程序占用</p></blockquote><p>PS：如果 app 在移动设备上不需要全屏展示，那么在 chrome 上模拟设备大小时要减去设备状态栏的高度。</p><h1 id="页面适配"><a href="#页面适配" class="headerlink" title="页面适配"></a>页面适配</h1><p>在 css 中有很多相对长度，其中常用的有 em、rem、vw、vh 等，在小程序上还有 rpx。不管是 rem、vw 还是 rpx，都是跟屏幕宽度有关的。用这些计量单位开发的页面，不一定能兼容所有的移动端设备。<br>例如完美适配 iphone 6 的页面，在平板上就可能会出现样式问题。</p><ol><li><p>媒体查询@media解决适配问题， 要写很多media 工作量很大</p></li><li><p><strong>可行的解决方案： 整体布局使用vw、百分比%作为计量单问，内容样式使用px作为计量单位</strong></p></li></ol><p>好处：<strong>更大的屏幕可以看到更多的内容，而不是看到更大的内容</strong></p><p><a href="https://news.qq.com/zt2020/page/feiyan.htm#/" target="_blank" rel="external nofollow noopener noreferrer">https://news.qq.com/zt2020/page/feiyan.htm#/</a></p><p>方法：这个网站整体布局和内容都是使用 vw 作为计量单位，在移动端上没什么问题。但在 PC 端下，它使用了 scale 属性。也就是说，当检测到你的设备是 PC 时，它会使用 scale 将网站进行缩小，最大宽度固定在 750px。这样，即使内容样式使用 vw 作为计量单位，也不会出现样式错乱的问题。</p><ol start="3"><li>栅格化布局<br>在某些情况下，可以使用栅格化布局。例如当页面分辨率较大时，采取三列布局；当页面分辨率较小时，采用两列布局。</li></ol><pre class=" language-HTML"><code class="language-HTML"><div class="container">    <div class="col col-md-4 col-sm-6"></div>    <div class="col col-md-4 col-sm-6"></div>    <div class="col col-md-4 col-sm-12"></div>    <div class="col col-md-3 col-sm-3"></div>    <div class="col col-md-6 col-sm-6"></div>    <div class="col col-md-3 col-sm-3"></div>    <div class="col col-md-1 col-sm-2"></div>    <div class="col col-md-1 col-sm-2"></div>    <div class="col col-md-2 col-sm-8"></div>    <div class="col col-md-2 col-sm-3"></div>    <div class="col col-md-6 col-sm-3"></div></div>    </code></pre><p>分辨率较大时的页面：</p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/93787f19d9f244b5ad97a4c065418228~tplv-k3u1fbpfcp-zoom-1.image"><p>分辨率较小时：</p><img data-src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b98c9d75cc994afc9405b9ea941da32a~tplv-k3u1fbpfcp-zoom-1.image"><ol start="4"><li>尽量使用移动端专用的 UI 组件库</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;获取设备的真实开发分辨率（逻辑分辨率）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;移动端适配涉及到以下名词：&lt;/p&gt;
&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;CSS像素、物理分辨率、逻辑分辨率、设备像素比
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端小记</title>
    <link href="http://lingyunsheng.cn/archives/20708.html"/>
    <id>http://lingyunsheng.cn/archives/20708.html</id>
    <published>2020-11-23T07:20:21.000Z</published>
    <updated>2020-11-23T09:29:30.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="螺旋数组"><a href="#螺旋数组" class="headerlink" title="螺旋数组"></a>螺旋数组</h1><blockquote><p>给定一个m x n大小的矩阵（m行，n列），按螺旋的顺序返回矩阵中的所有元素。</p></blockquote><blockquote><p>输入 [[1,2,3],[4,5,6],[7,8,9]]</p></blockquote><blockquote><p>输出[1,2,3,6,9,8,7,4,5]</p></blockquote><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** *  * @param matrix int整型二维数组  * @return int整型一维数组  var arr = [    [1,2,3],    [4,5,6],    [7.8,9]  ]  返回 [1,2,3,6,9,8,7,4,5] */</span><span class="token comment" spellcheck="true">/** *  * @param matrix int整型二维数组  * @return int整型一维数组 */</span><span class="token keyword">function</span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span> matrix <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token comment" spellcheck="true">// 保存结果</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>matrix<span class="token operator">||</span><span class="token operator">!</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  整体的数组长度</span>    <span class="token keyword">let</span> col <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  数组里面的长度</span>    <span class="token keyword">let</span> row <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> col <span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> row <span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>undefined<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//  定义四个边界</span>                <span class="token comment" spellcheck="true">// 由于行列不相等，因此定义四个变量用于记录边界：</span>                <span class="token comment" spellcheck="true">// 左边界0</span>                <span class="token comment" spellcheck="true">// 右边界1</span>                <span class="token comment" spellcheck="true">// 上边界2</span>                <span class="token comment" spellcheck="true">// 下边界3</span>                <span class="token comment" spellcheck="true">// 然后以top和left基准层层打印，值得注意的是，为了避免重复打印，我们需要在打印下边和左边时额外判断一下top和bottom以及left和right是否相等：</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>row<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>                        j<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>col<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>matrix<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>                        i<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>row<span class="token number">-1</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">!=</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>                        j<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        temp<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>temp <span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> col <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        i<span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span><span class="token punctuation">{</span>                        temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>length <span class="token operator">==</span> row<span class="token operator">*</span>col<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">return</span> res<span class="token punctuation">;</span>                <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    spiralOrder <span class="token punctuation">:</span> spiralOrder<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="回溯法（分治思想）–集合的所有子集"><a href="#回溯法（分治思想）–集合的所有子集" class="headerlink" title="回溯法（分治思想）–集合的所有子集"></a>回溯法（分治思想）–集合的所有子集</h1><p><strong>回溯法</strong>：回溯法（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><blockquote><p>现在有一个没有重复元素的整数集合S，求S的所有子集<br>注意：<br>你给出的子集中的元素必须按升序排列<br>给出的解集中不能出现重复的元素</p></blockquote><blockquote><p>输入 [1,2,3]<br>[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]</p></blockquote><p><strong>方法一位运算</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** *  * @param A int整型一维数组  * @return int整型二维数组 */</span><span class="token keyword">function</span> <span class="token function">subsets</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> num <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num <span class="token operator">=</span> num <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    subsets <span class="token punctuation">:</span> subsets<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>方法二：深度遍历优先</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** *  * @param A int整型一维数组  * @return int整型二维数组 */</span><span class="token keyword">function</span> <span class="token function">subsets</span><span class="token punctuation">(</span> A <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>A<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//  定义一个去重的数组</span>    <span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> arrSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 遍历</span>    <span class="token keyword">const</span> dfs <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> num <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span>length <span class="token operator">||</span> path<span class="token punctuation">[</span>path<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                path<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>                <span class="token keyword">const</span> str <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arrSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    arrSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>                <span class="token punctuation">}</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">set</span><span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    subsets <span class="token punctuation">:</span> subsets<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="缺失数字"><a href="#缺失数字" class="headerlink" title="缺失数字"></a>缺失数字</h1><blockquote><p>从0,1,2,…,n这n+1个数中选择n个数，找出这n个数中缺失的那个数，要求O(n)尽可能小。</p></blockquote><blockquote><p>输入 [0,1,2,3,4,5,7]</p></blockquote><blockquote><p>6</p></blockquote><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * 找缺失数字 * @param a int整型一维数组 给定的数字串 * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    solve <span class="token punctuation">:</span> solve<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="出现次数tok问题"><a href="#出现次数tok问题" class="headerlink" title="出现次数tok问题"></a>出现次数tok问题</h1><p>给定String类型的数组strArr，再给定整数k，请严格按照排名顺序打印 出次数前k名的字符串。<br>[要求]<br>如果strArr长度为N，时间复杂度请达到O(N \log K)O(NlogK)</p><p>输出K行，每行有一个字符串和一个整数（字符串表示）。<br>你需要按照出现出现次数由大到小输出，若出现次数相同时字符串字典序较小的优先输出</p><p>[“1”,”2”,”3”,”4”],2</p><p>[[“1”,”1”],[“2”,”1”]]</p><p>[“1”,”1”,”2”,”3”],2<br>[[“1”,”2”],[“2”,”1”]]</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * return topK string * @param strings string字符串一维数组 strings * @param k int整型 the k * @return string字符串二维数组 */</span><span class="token keyword">function</span> <span class="token function">topKstrings</span><span class="token punctuation">(</span> strings <span class="token punctuation">,</span>  k <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token comment" spellcheck="true">//  字符串排序</span>    strings<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 去重</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//  遍历字符串 判断map是否有这个值 没有set 有的话 重新获取 push key val</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i of strings<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> map<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sec<span class="token punctuation">,</span> fir<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fir<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> sec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    topKstrings <span class="token punctuation">:</span> topKstrings<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-ts"><code class="language-ts"></code></pre><h1 id="二叉树字形层次遍历"><a href="#二叉树字形层次遍历" class="headerlink" title="二叉树字形层次遍历"></a>二叉树字形层次遍历</h1><blockquote><p>思路：二叉树的层序遍历要用到迭代法，设置一个队列queue（其实就是数组），把根节点加入队列中，当队列不会空时，出队列元素，然后把这个元素的子结点加入到队列中。</p></blockquote><p>给定一个二叉树，返回该二叉树的之字形层序遍历，（第一层从左向右，下一层从右向左，一直这样交替）<br>例如：<br>给定的二叉树是{3,9,20,#,#,15,7},</p><img data-src="https://uploadfiles.nowcoder.com/images/20200807/999991351_1596788654427_630E55F47DBAFBF72C88E265929E43F7" width="200" height="200"><p>该二叉树之字形层序遍历的结果是</p><blockquote><p>[<br>[3],<br>[20,9],<br>[15,7]<br>]<br>输入<br>{1,#,2}</p></blockquote><p>输出<br>[[1],[2]]</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/* * function TreeNode(x) { *   this.val = x; *   this.left = null; *   this.right = null; * } */</span><span class="token comment" spellcheck="true">/**  *   * @param root TreeNode类   * @return int整型二维数组  */</span><span class="token keyword">function</span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义一个栈 保存值 </span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个队列 将root根节点添加到队列种</span>    <span class="token comment" spellcheck="true">// 队列不为空 出队 将子节点也添加到 </span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 队列的长度</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 出队</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            row<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        level<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>row<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    zigzagLevelOrder <span class="token punctuation">:</span> zigzagLevelOrder<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自下而上遍历</span><span class="token keyword">function</span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义一个队列 根元素添加到队列</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 定义结果保存数组</span>    <span class="token keyword">let</span> res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义队列长度</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将子节点添加到结果</span>            <span class="token comment" spellcheck="true">// 出队 </span>            <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            row<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 左节点存在</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//把结果添加到res</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    zigzagLevelOrder <span class="token punctuation">:</span> zigzagLevelOrder<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二叉树的层次遍历"><a href="#二叉树的层次遍历" class="headerlink" title="二叉树的层次遍历"></a>二叉树的层次遍历</h2><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/* * function TreeNode(x) { *   this.val = x; *   this.left = null; *   this.right = null; * } */</span><span class="token comment" spellcheck="true">/**  *   * @param root TreeNode类   * @return int整型二维数组  */</span><span class="token keyword">function</span> <span class="token function">levelOrder</span><span class="token punctuation">(</span> root <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> level <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 保存数组</span>        <span class="token keyword">let</span> row <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> temp <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 出队</span>            row<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>temp<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>     levelOrder <span class="token punctuation">:</span> levelOrder<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="旋转数组找到值"><a href="#旋转数组找到值" class="headerlink" title="旋转数组找到值"></a>旋转数组找到值</h1><p>给出一个转动过的有序数组，你事先不知道该数组转动了多少<br>(例如,0 1 2 4 5 6 7可能变为4 5 6 7 0 1 2).<br>在数组中搜索给出的目标值，如果能在数组中找到，返回它的索引，否则返回-1。<br>假设数组中不存在重复项。</p><p>[1],0</p><p>-1</p><p>[3,2,1],1<br>2</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/**  *   * @param A int整型一维数组   * @param target int整型   * @return int整型  */</span><span class="token keyword">function</span> <span class="token function">search</span><span class="token punctuation">(</span> A <span class="token punctuation">,</span>  target <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">let</span> low <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> high <span class="token operator">=</span> A<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> mid        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断旋转数组的左边有序</span>        <span class="token comment" spellcheck="true">// 反转后，至少有一边有序的，需要判断在不在有序的区间内，如果不在，取另外一半区间范围</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左有序。 ---------虽然我本题通过了，但没想明白，为什么我A[low] &lt; A[mid]就不可以？？？自己写时，就这一点过不了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">>=</span> A<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在不在左区间</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 右有序</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    search <span class="token punctuation">:</span> search<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// </span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;螺旋数组&quot;&gt;&lt;a href=&quot;#螺旋数组&quot; class=&quot;headerlink&quot; title=&quot;螺旋数组&quot;&gt;&lt;/a&gt;螺旋数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给定一个m x n大小的矩阵（m行，n列），按螺旋的顺序返回矩阵中的所有元素。&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>分治算法之美</title>
    <link href="http://lingyunsheng.cn/archives/3371.html"/>
    <id>http://lingyunsheng.cn/archives/3371.html</id>
    <published>2020-11-18T05:30:07.376Z</published>
    <updated>2020-11-18T06:55:27.102Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git以及工作流程</title>
    <link href="http://lingyunsheng.cn/archives/2240.html"/>
    <id>http://lingyunsheng.cn/archives/2240.html</id>
    <published>2020-11-17T01:16:50.000Z</published>
    <updated>2020-11-17T01:56:46.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h1><blockquote><p>不管多人协作还是一个人开发在使用git时都需要一套流程规范来执行</p></blockquote><ul><li>git flow</li></ul><p>目前我所在公司是采用的多分枝开发，有的是采用单一master开发，submodule的方式，有的公司一个分支一个项目</p><p>开发环境的区分分为： 生产环境（线上环境）、预发布环境、测试环境、开发环境（本地）<br>沙盒环境，基于DOcker前后端根据每一个commit发布</p><p>可以选择性的提交单个文件 git stash</p><p><strong>git stash</strong></p><p>git stash 用于保存当前的修改，回到上一次的提交，将当前的更改存到本地，切换到<strong>HEAD</strong>提交</p><p>通过git stash存储的修改列表,可以通过git stash list查看.git stash show用于校验,git stash apply用于重新存储.直接执行git stash等同于git stash save.</p><p>最新的存储保存在refs/stash中.老的存储可以通过相关的参数获得,例如stash@{0}获取最新的存储,stash@{1}获取次新.stash@{2.hour.ago}获取两小时之前的.存储可以直接通过索引的位置来获得stash@{n}.</p><p>git stash的每个存储单元在工作仓库中是通过commit的形式由树结构展示的.它的根节点是HEAD所在的提交.以下图标来表示stash和branch的关系.</p><p><strong>git stash的应用常见</strong></p><ul><li><p>开发到一般，需要同步远端代码，没有冲突直接git pull 有冲突</p><ul><li>先保存本地代码 git stash</li><li>进行pull</li><li>将本地代码添加到最新代码后 git stash pop</li></ul></li><li><p>工作流被打断，做其他需求</p><ul><li>方法一<ul><li>创建一个新分支 当前代码提交过去再merge <pre class=" language-ts"><code class="language-ts">   git checkout <span class="token operator">-</span>b dev<span class="token operator">-</span>master   git commit <span class="token operator">-</span>m <span class="token operator">-</span>a <span class="token string">'update'</span>   git checkout master   git commit <span class="token operator">-</span>m <span class="token operator">-</span>a <span class="token string">'fix'</span>   git reset <span class="token operator">--</span>soft HEAD<span class="token operator">^</span>     <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 返回上一次回滚 <span class="token operator">--</span><span class="token operator">></span>   git reset <span class="token operator">--</span>hasr <span class="token operator">^</span>HEAD<span class="token operator">^</span>     git reflog 查看当前的</code></pre><ul><li>方法二git stash</li></ul></li><li>保存开发一半的代码  git stash</li><li>提交到缓存区 git commit -a -m ‘sss’</li><li>git stash pop // 将代码追加到最新提交后</li></ul></li></ul></li><li><p>提交特定文件，修改了多个文件，只想提交几个文件，先暂存修改 使用<strong>git stash save –keep-index</strong></p><ul><li>将第一部分加入管理the index  git add –patch foo</li><li>其余部分保存下来 git stash  save –key-index</li><li>提交全部git管理的代码 gitcommit -m ‘save’</li><li>继续进行存储的工作 git stash pop</li></ul></li><li><p>恢复被错误<strong>clear/drop</strong>的存储</p></li></ul><p><strong>git commit</strong></p><p>项目提交的描述如果没有一定的规范，随性而为的话，就会让其它人误解。通常提交采用英文作为描述，可以多行文字。在社区中有很多流行的方案(比如Conventional Commit)，更多的是采用Angular的方式。</p><p><strong>Change Log</strong></p><p>如果采用了社区统一的commit方式，那么我们就可以基于提交来生成变更记录，在每一次版本发布时自动关联Jira中的Issue。</p><p><strong>版本号生成</strong></p><p>这个通常是按照Semantic Versioning的规范来打tag，具休怎么做可以自行尝试</p><p>在项目中通常使用gitHooks和husky这二个node包来配置上面提到的这些。在git钩子中我们在每次提交、push前跑一次单元测试、代码覆盖率。前端代码覆盖率一般来说没有必要加，不然很痛苦。</p><pre class=" language-JSON"><code class="language-JSON">{  "name": "your-project-name",  "version": "0.1.0",  "scripts": {    "clean": "rm -rf node_modules",    "serve": "vue-cli-service serve",    "build": "vue-cli-service build",    "lint": "vue-cli-service lint --no-fix",    "stylelint": "stylelint src/**/*.{scss,css,less,css,vue,jsx} --fix",    "eslint": "eslint --ext .js,.jsx,.vue src --fix",    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s -r 0"  },  "repository": {    "type": "git",    "url": "http://gitlab.transsion.com/mi/mi-bigdata-admin.git"  },  "dependencies": {},  "devDependencies": {    "@commitlint/cli": "^8.1.0",    "@commitlint/config-conventional": "^8.1.0",    "babel-eslint": "^10.0.1",    "conventional-changelog-cli": "^2.0.23",    "eslint": "^6.2.1",    "eslint-plugin-vue": "^5.2.3",    "husky": "^3.0.4",    "lint-staged": "^9.2.3",    "stylelint": "^10.1.0",    "stylelint-config-standard": "^18.3.0",    "stylelint-scss": "^3.9.4",  },  "gitHooks": {    "pre-commit": "lint-staged"  },  "lint-staged": {    "*.{js,vue}": [      "vue-cli-service lint",      "eslint --fix --ext .js,.vue src",      "git add"    ],    "*.{css,scss,less,vue}": [      "stylelint --fix",      "git add"    ]  },  "husky": {    "hooks": {      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"    }  }}</code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建一个本地的开发分支</span>git checkout <span class="token operator">-</span>b local<span class="token operator">-</span>developgit branch local<span class="token operator">-</span>develop<span class="token comment" spellcheck="true">//  推送到远程 本地和远程同步</span>git push <span class="token operator">-</span>u origin local<span class="token operator">-</span>develop<span class="token comment" spellcheck="true">//  也可以这样写</span>git checout <span class="token operator">-</span>b local<span class="token operator">-</span>develop origin<span class="token operator">/</span>local<span class="token operator">-</span>develop</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;版本控制&quot;&gt;&lt;a href=&quot;#版本控制&quot; class=&quot;headerlink&quot; title=&quot;版本控制&quot;&gt;&lt;/a&gt;版本控制&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;不管多人协作还是一个人开发在使用git时都需要一套流程规范来执行&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>核心框架原理与进阶</title>
    <link href="http://lingyunsheng.cn/archives/24710.html"/>
    <id>http://lingyunsheng.cn/archives/24710.html</id>
    <published>2020-11-17T00:50:21.000Z</published>
    <updated>2020-11-17T05:09:10.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-js-原理深度剖析"><a href="#Vue-js-原理深度剖析" class="headerlink" title="Vue.js 原理深度剖析"></a>Vue.js 原理深度剖析</h1><p>Vue.js是构建用户视图渐进式的SPA框架，核心原理就是响应式双向绑定的原理 MVVM</p><pre class=" language-ts"><code class="language-ts">computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName        <span class="token punctuation">}</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> names <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> names<span class="token punctuation">[</span>names<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="v-mode原理-双向绑定"><a href="#v-mode原理-双向绑定" class="headerlink" title="v-mode原理 双向绑定"></a>v-mode原理 双向绑定</h1><p>v-model本质是一个语法糖<br>， 使用v-model绑定数据，绑定了数据，又添加了一个input事件监听, 监听用户输入的事件 更新数据</p><p>自定义事件可以用于创建支持<strong>v-model</strong>的自定义输入组件</p><p>v-bind绑定数据 v-bind:value=”searchText”<br>再添加一个input事件监听 v-on:input=”search=$event.target.value”</p><pre class=" language-HTML"><code class="language-HTML"><input v-model="searchText">等价于：<input   v-bind:value="searchText"  v-on:input="searchText = $event.target.value"><!-- 组件上使用v-model --><validate-input  v-bind：value="value"  v-on:input="searchText =$event.target.value"></validate-input><validate-input v-model="value"></code></pre><h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>追踪数据的变化，vue2是Object.defineProperty, vue3使用proxy</p><p>当把一个JavaScript对象传入vue实例作为data选项，vue遍历对象</p><p>创建一个Observer监听器 监听数据的变更<br>所以的property， 并使用<strong>Object.defineProperty</strong>将这些property转化为getter/setter</p><p>setter/getter在property被访问和修改时通知变更</p><p>每个组件实例 对应着一**watcher++实例，组件渲染接触到property作为依赖，当setter触发时 watcher变更</p><p>检测变化的注意事项<br>由于 JavaScript 的限制，Vue 不能检测数组和对象的变化。尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p><p>deep监听深度</p><p>immediate 为true 先进入watch的 handler事件</p><img data-src="https://cn.vuejs.org/images/data.png"><p><strong>vue data必须是一个函数</strong></p><p>每一个组件都是Vue的实例，JS的实力是通过构造函数创建，每个构造函数可以<br><strong>new</strong>出很多个实例，每个实例都会继承原型上的方法或属性</p><p>vue中的data数据就是<strong>vue</strong>原型上的属性，如果data是一个对象的话</p><p>那么会影响到其他组件数据 data是一个函数时，只是改变这个内存地址的数据</p><h1 id="Vue-js-框架基础回顾"><a href="#Vue-js-框架基础回顾" class="headerlink" title="Vue.js 框架基础回顾"></a>Vue.js 框架基础回顾</h1><h1 id="Vue-CLI-基础设施深度解剖"><a href="#Vue-CLI-基础设施深度解剖" class="headerlink" title="Vue CLI 基础设施深度解剖"></a>Vue CLI 基础设施深度解剖</h1><h1 id="数据响应式实现原理分析"><a href="#数据响应式实现原理分析" class="headerlink" title="数据响应式实现原理分析"></a>数据响应式实现原理分析</h1><h1 id="虚拟-DOM-和-Diff-算法的实现"><a href="#虚拟-DOM-和-Diff-算法的实现" class="headerlink" title="虚拟 DOM 和 Diff 算法的实现"></a>虚拟 DOM 和 Diff 算法的实现</h1><h1 id="模板编译模块的实现原理"><a href="#模板编译模块的实现原理" class="headerlink" title="模板编译模块的实现原理"></a>模板编译模块的实现原理</h1><h1 id="Vue-Router-源码剖析"><a href="#Vue-Router-源码剖析" class="headerlink" title="Vue Router 源码剖析"></a>Vue Router 源码剖析</h1><h1 id="Vue-js-高级与进阶"><a href="#Vue-js-高级与进阶" class="headerlink" title="Vue.js 高级与进阶"></a>Vue.js 高级与进阶</h1><h1 id="封装自己的-Vue-组件库"><a href="#封装自己的-Vue-组件库" class="headerlink" title="封装自己的 Vue 组件库"></a>封装自己的 Vue 组件库</h1><h1 id="Vue-项目性能优化"><a href="#Vue-项目性能优化" class="headerlink" title="Vue 项目性能优化"></a>Vue 项目性能优化</h1><h1 id="Vuex-数据流管理方案"><a href="#Vuex-数据流管理方案" class="headerlink" title="Vuex 数据流管理方案"></a>Vuex 数据流管理方案</h1><h1 id="使用-TypeScript-开发-Vue-js-应用"><a href="#使用-TypeScript-开发-Vue-js-应用" class="headerlink" title="使用 TypeScript 开发 Vue.js 应用"></a>使用 TypeScript 开发 Vue.js 应用</h1><h1 id="原生服务端渲染（SSR）的实现、同构开发"><a href="#原生服务端渲染（SSR）的实现、同构开发" class="headerlink" title="原生服务端渲染（SSR）的实现、同构开发"></a>原生服务端渲染（SSR）的实现、同构开发</h1><h1 id="Nuxt-js-集成式-SSR-框架"><a href="#Nuxt-js-集成式-SSR-框架" class="headerlink" title="Nuxt.js 集成式 SSR 框架"></a>Nuxt.js 集成式 SSR 框架</h1><h1 id="静态站点生成（SSG）方案及-Gridsome"><a href="#静态站点生成（SSG）方案及-Gridsome" class="headerlink" title="静态站点生成（SSG）方案及 Gridsome"></a>静态站点生成（SSG）方案及 Gridsome</h1><h1 id="Vue-js-3-0-设计和用法的变化以及优势"><a href="#Vue-js-3-0-设计和用法的变化以及优势" class="headerlink" title="Vue.js 3.0 设计和用法的变化以及优势"></a>Vue.js 3.0 设计和用法的变化以及优势</h1><h1 id="Vue-js-3-0-Composition-APIs"><a href="#Vue-js-3-0-Composition-APIs" class="headerlink" title="Vue.js 3.0 Composition APIs"></a>Vue.js 3.0 Composition APIs</h1><h1 id="Vue-js-Vue-Router-Vuex-TypeScript-实战项目开发"><a href="#Vue-js-Vue-Router-Vuex-TypeScript-实战项目开发" class="headerlink" title="Vue.js + Vue Router + Vuex + TypeScript 实战项目开发"></a>Vue.js + Vue Router + Vuex + TypeScript 实战项目开发</h1><h2 id="使用vue后怎么针对搜索引擎做SEO优化"><a href="#使用vue后怎么针对搜索引擎做SEO优化" class="headerlink" title="使用vue后怎么针对搜索引擎做SEO优化"></a>使用vue后怎么针对搜索引擎做SEO优化</h2><ul><li>nuxt服务端渲染框架</li><li>ssr 服务端渲染框架</li><li>phantom.js 针对爬虫做处理 动态更改meta</li><li>vue-meta-info 与prerender-spa-plugin 预渲染</li></ul><h1 id="react和vue的对比比较"><a href="#react和vue的对比比较" class="headerlink" title="react和vue的对比比较"></a>react和vue的对比比较</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><ul><li>使用 Virtual DOM</li><li>提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。</li><li>将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li></ul><h1 id="React-设计原理解密"><a href="#React-设计原理解密" class="headerlink" title="React 设计原理解密"></a>React 设计原理解密</h1><h1 id="React-框架基础回顾、JSX-语法"><a href="#React-框架基础回顾、JSX-语法" class="headerlink" title="React 框架基础回顾、JSX 语法"></a>React 框架基础回顾、JSX 语法</h1><h1 id="分析-Virtual-DOM-目的及实现原理"><a href="#分析-Virtual-DOM-目的及实现原理" class="headerlink" title="分析 Virtual-DOM 目的及实现原理"></a>分析 Virtual-DOM 目的及实现原理</h1><h1 id="React-核心算法：Fiber"><a href="#React-核心算法：Fiber" class="headerlink" title="React 核心算法：Fiber"></a>React 核心算法：Fiber</h1><h1 id="React-框架的设计哲学"><a href="#React-框架的设计哲学" class="headerlink" title="React 框架的设计哲学"></a>React 框架的设计哲学</h1><h1 id="React-框架核心源码解读"><a href="#React-框架核心源码解读" class="headerlink" title="React 框架核心源码解读"></a>React 框架核心源码解读</h1><h1 id="React-进阶与实战"><a href="#React-进阶与实战" class="headerlink" title="React 进阶与实战"></a>React 进阶与实战</h1><h1 id="封装-React-自定义组件库"><a href="#封装-React-自定义组件库" class="headerlink" title="封装 React 自定义组件库"></a>封装 React 自定义组件库</h1><h1 id="React-组件的性能优化"><a href="#React-组件的性能优化" class="headerlink" title="React 组件的性能优化"></a>React 组件的性能优化</h1><h1 id="受控和非受控组件的选用标准"><a href="#受控和非受控组件的选用标准" class="headerlink" title="受控和非受控组件的选用标准"></a>受控和非受控组件的选用标准</h1><h1 id="React-组件的自动化测试"><a href="#React-组件的自动化测试" class="headerlink" title="React 组件的自动化测试"></a>React 组件的自动化测试</h1><h1 id="React-16-8-Hooks-特性的使用以及实现原理分析"><a href="#React-16-8-Hooks-特性的使用以及实现原理分析" class="headerlink" title="React 16.8 Hooks 特性的使用以及实现原理分析"></a>React 16.8 Hooks 特性的使用以及实现原理分析</h1><h1 id="CSS-in-JS-方案以及-emotion-库"><a href="#CSS-in-JS-方案以及-emotion-库" class="headerlink" title="CSS-in-JS 方案以及 emotion 库"></a>CSS-in-JS 方案以及 emotion 库</h1><h1 id="现代化-React-应用-UI-框架-Chakra-UI"><a href="#现代化-React-应用-UI-框架-Chakra-UI" class="headerlink" title="现代化 React 应用 UI 框架 Chakra-UI"></a>现代化 React 应用 UI 框架 Chakra-UI</h1><h1 id="使用-TypeScript-开发-React-应用"><a href="#使用-TypeScript-开发-React-应用" class="headerlink" title="使用 TypeScript 开发 React 应用"></a>使用 TypeScript 开发 React 应用</h1><h1 id="React-数据流方案：Redux、Mobx"><a href="#React-数据流方案：Redux、Mobx" class="headerlink" title="React 数据流方案：Redux、Mobx"></a>React 数据流方案：Redux、Mobx</h1><h1 id="Redux-常用中间件以及中间件的开发"><a href="#Redux-常用中间件以及中间件的开发" class="headerlink" title="Redux 常用中间件以及中间件的开发"></a>Redux 常用中间件以及中间件的开发</h1><h1 id="原生服务端渲染（SSR）的实现、同构开发-1"><a href="#原生服务端渲染（SSR）的实现、同构开发-1" class="headerlink" title="原生服务端渲染（SSR）的实现、同构开发"></a>原生服务端渲染（SSR）的实现、同构开发</h1><h1 id="Next-js-集成式-SSR-框架"><a href="#Next-js-集成式-SSR-框架" class="headerlink" title="Next.js 集成式 SSR 框架"></a>Next.js 集成式 SSR 框架</h1><h1 id="Next-js-集成式-SSR-框架-1"><a href="#Next-js-集成式-SSR-框架-1" class="headerlink" title="Next.js 集成式 SSR 框架"></a>Next.js 集成式 SSR 框架</h1><h1 id="静态站点生成（SSG）方案及-Gatsby-框架"><a href="#静态站点生成（SSG）方案及-Gatsby-框架" class="headerlink" title="静态站点生成（SSG）方案及 Gatsby 框架"></a>静态站点生成（SSG）方案及 Gatsby 框架</h1><h1 id="React-React-Router-Redux-Ant-Design-TypeScript-实战"><a href="#React-React-Router-Redux-Ant-Design-TypeScript-实战" class="headerlink" title="React + React Router + Redux + Ant Design + TypeScript 实战"></a>React + React Router + Redux + Ant Design + TypeScript 实战</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue-js-原理深度剖析&quot;&gt;&lt;a href=&quot;#Vue-js-原理深度剖析&quot; class=&quot;headerlink&quot; title=&quot;Vue.js 原理深度剖析&quot;&gt;&lt;/a&gt;Vue.js 原理深度剖析&lt;/h1&gt;&lt;p&gt;Vue.js是构建用户视图渐进式的SPA框架，核心原
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript深度剖析</title>
    <link href="http://lingyunsheng.cn/archives/53230.html"/>
    <id>http://lingyunsheng.cn/archives/53230.html</id>
    <published>2020-11-16T00:36:03.000Z</published>
    <updated>2020-11-18T05:19:09.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-新特性"><a href="#ECMAScript-新特性" class="headerlink" title="ECMAScript 新特性"></a>ECMAScript 新特性</h1><h2 id="JavaScript-vs-ECMAScript"><a href="#JavaScript-vs-ECMAScript" class="headerlink" title="JavaScript vs. ECMAScript"></a>JavaScript vs. ECMAScript</h2><p>ECMAScript是JavaScript的一种语法规则或者说标准，JavaScript是ECMAScript的一种实现</p><p>参考阮一峰的ECMAScript</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 JScript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><h2 id="块级作用域、模板字符串"><a href="#块级作用域、模板字符串" class="headerlink" title="块级作用域、模板字符串"></a>块级作用域、模板字符串</h2><h3 id="块级作用域var-const-let与暂时性死区"><a href="#块级作用域var-const-let与暂时性死区" class="headerlink" title="块级作用域var\const\let与暂时性死区"></a>块级作用域var\const\let与暂时性死区</h3><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6新增了let命令，声明变量，用法类似var，声明的变量，再在let命令所在的代码快内有效</p><pre class=" language-ts"><code class="language-ts"><span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> b <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">}</span>a <span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span>b <span class="token number">1</span><span class="token comment" spellcheck="true">// 块内定义两个变量 一个let定义的 一个定义的var变量</span><span class="token comment" spellcheck="true">// let定义的块级变量 在代码块外使用会报错</span></code></pre><p><strong>for</strong>循环的计数器，很适合使用<strong>let</strong>命令</p><pre class=" language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError: a is not defined</span></code></pre><p>计数器<strong>i</strong>只在<strong>for</strong>循环体内有效，循环外引用就报错</p><blockquote><p>打印 1-10 用var和const执行的区别</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// var</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//10</span><span class="token comment" spellcheck="true">// 使用var定义变量i 指向的是全局 </span><span class="token comment" spellcheck="true">// 全局只有一个var变量  这个i赋值给数组 指向全局i</span><span class="token comment" spellcheck="true">// 数组的每一项都是指向同一个i</span><span class="token comment" spellcheck="true">// 运行输出的是最后一轮i的值 输出的是10</span><span class="token comment" spellcheck="true">// let</span><span class="token keyword">var</span> a <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6</span><span class="token comment" spellcheck="true">// let定义的i只在本次循环有效，每一轮都是新的值，所以输出的是6</span><span class="token comment" spellcheck="true">// js引擎内部会记住上一轮循环的值</span><span class="token comment" spellcheck="true">// 初始化i，在上一轮循环基础上计算</span></code></pre><blockquote><p>打印</p></blockquote><pre class=" language-ts"><code class="language-ts"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  立即执行函数</span>    <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  方法二 let</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// </span></code></pre><ul><li>不存在变量提升</li></ul><p><strong>var</strong>定义的变量会发生“变量提升”，当变量没有定义时使用，值为<strong>undefined</strong><br>变量提升，将var声明的变量提升到全局作用域顶层<br><strong>let</strong>命令是不存在变量提升，只有当变量声明了才可以使用, 否则抛出<strong>ReferenceError</strong>错误</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  var的情况</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ReferenceError</span><span class="token keyword">let</span> bar <span class="token operator">=</span><span class="token number">1</span></code></pre><ul><li>暂时性死区<br>块级作用域存在<strong>let命令</strong>在该块内不受外部的影响，在声明变量前对变量赋值会报错<br>在变量命令声明之前使用变量都会抛出错误，称为<strong>暂时性死区</strong>(temporal dead zone, TDZ)<br>temporal dead zone</li></ul><p>在<strong>let</strong>变量声明之前，都属于变量的<strong>死区</strong></p><p><strong>ES6规定暂时性死区和let、const不存在变量提升，变量声明之前变量不可以使用，声明变量之前的作用域属于暂时性死区，当变量声明之后，才可以获取使用该变量</strong></p><pre class=" language-js"><code class="language-js">tmp <span class="token operator">=</span><span class="token string">'123'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// referenceError</span><span class="token keyword">let</span> tmp<span class="token punctuation">;</span><span class="token keyword">typeof</span> x<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// referenceError let还没有声明就 引用类型判断</span><span class="token keyword">let</span> x<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span>x<span class="token operator">=</span>y<span class="token punctuation">,</span> y<span class="token operator">=</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 报错</span><span class="token comment" spellcheck="true">// x,y都是变量，y变量还没有声明传入，就被x变量引用，所以会报错，y变量没有声明</span><span class="token comment" spellcheck="true">// 还是属于死区 </span></code></pre><ul><li>不允许重复声明</li></ul><p><strong>let</strong>不允许在同一作用域，重复声明一个相同的变量</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 报错</span><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>const初始化 需要声明一个常量 值不可以改变 内存地址不改变就可以<h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3>ES5只有全局作用域和函数作用域，没有块级作用域，内层变量会覆盖外层变量<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// var tmp = undefined</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">'hellowrold'</span>      <span class="token comment" spellcheck="true">// var tmp 声明的变量会提升到全局 影响外层</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre><code>用来计数的循环变量泄露为全局变量```jsfor(var i=0; i&lt;5; i++) {    console.log(i)}// 输出 5 5 5 5 5// 变量i控制循环，泄露成全局变量</code></pre><p><strong>ES6的块级作用域</strong></p><p><strong>let</strong>新增了块级作用域</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">10</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// n=3</span><span class="token punctuation">}</span></code></pre><p>if里面有一个块级作用域 外面也有一个 互不影响 输出的3<br><strong>ES6允许块级作用域嵌套</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">'aaa'</span>    <span class="token punctuation">{</span><span class="token keyword">let</span> name <span class="token operator">=</span><span class="token string">'aqaaa'</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>ES5的块级作用域通过立即执行函数（匿名函数）实现的</strong><br><strong>IIFE</strong></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  块级作用域</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token operator">...</span>    <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><strong>ES6支持在块级作用域中声明函数</strong></p><ul><li>允许在块级作用域内声明函数。</li><li>函数声明类似于var，即会提升到全局作用域或函数作用域的头部。</li><li>同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 块级作用域内部，优先使用函数表达式</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'secret'</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p><strong>const</strong>声明一个只读的常量， 一旦声明， 常量的值就不能改变</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.1415</span>PI <span class="token comment" spellcheck="true">// 3.1415</span>PI <span class="token operator">=</span> <span class="token number">3</span><span class="token comment" spellcheck="true">//  typeerror 不能改变</span></code></pre><p><strong>const</strong>作用域块级作用域，只在声明所在的块级作用域有效</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MAX <span class="token comment" spellcheck="true">// Uncaught ReferenceError: MAX is not defined</span></code></pre><p><strong>const</strong>不存在变量提升，暂时性死区问题Temporal dead zone TDZ, 只能在<br>变量声明之后使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReferenceError</span>  <span class="token keyword">const</span> MAX <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>const</strong>声明的常量不可以重复声明</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">"Hello!"</span><span class="token punctuation">;</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 以下两行都会报错</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">"Goodbye!"</span><span class="token punctuation">;</span><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></code></pre><h4 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h4><p><strong>const</strong>声明的是一个常量变量不可以改变，指的是变量指向的那个内存地址<br>所保存到数据类型不得改动，对于简单数据类型都存储在栈中，，值就保存在<br>变量指向的内存地址，而如果变量指向的是对象类型，那么指向的就是一个指针<br>地址不变就行</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为 foo 添加一个属性，可以成功</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop <span class="token comment" spellcheck="true">// 123</span><span class="token comment" spellcheck="true">// 将 foo 指向另一个对象，就会报错</span>foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: "foo" is read-only</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可执行</span>a<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 可执行</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Dave'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 报错</span></code></pre><p>上面代码中，常量a是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给a，就会报错。</p><p>如果真的想将对象冻结，应该使用<strong>Object.freeze</strong>方法。</p><p><strong>Object.freeze方法冻结</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment" spellcheck="true">// 对象被冻结无法操作</span><span class="token comment" spellcheck="true">//  对象冻结</span><span class="token keyword">var</span> freezes <span class="token operator">=</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">freezes</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>ES5 只有两种声明变量的方法：var命令和function命令。ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。</p><h3 id="顶层对象的属性"><a href="#顶层对象的属性" class="headerlink" title="顶层对象的属性"></a>顶层对象的属性</h3><p>顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p><pre class=" language-js"><code class="language-js">window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a <span class="token comment" spellcheck="true">// 1</span>a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// 2</span></code></pre><p>window对象有实体含义，指的是浏览器的窗口对象，var命令和function命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果在 Node 的 REPL 环境，可以写成 global.a</span><span class="token comment" spellcheck="true">// 或者采用通用方法，写成 this.a</span>window<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>window<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>var声明的变量全局变量 顶层对象就是window</p><p>let声明的全局变量 不与顶层对象挂钩 所以window.b = undefined</p><h3 id="globalThis"><a href="#globalThis" class="headerlink" title="globalThis"></a>globalThis</h3><p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p><ul><li><p>浏览器里面，顶层对象是window，但 Node 和 Web Worker 没有window。</p></li><li><p>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。</p></li><li><p>Node 里面，顶层对象是global，但其他环境都不支持。<br>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用this变量，但是有局限性。</p></li><li><p>全局环境中，this会返回顶层对象。但是，Node.js 模块中this返回的是当前模块，ES6 模块中this返回的是undefined。</p></li><li><p>函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。</p></li><li><p>不管是严格模式，还是普通模式，new Function(‘return this’)()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。<br>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p></li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 方法一</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span>   <span class="token operator">?</span> window   <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> process <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>      <span class="token keyword">typeof</span> require <span class="token operator">===</span> <span class="token string">'function'</span> <span class="token operator">&amp;&amp;</span>      <span class="token keyword">typeof</span> global <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span>     <span class="token operator">?</span> global     <span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法二</span><span class="token keyword">var</span> getGlobal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> self <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> self<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> window<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> global <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> global<span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'unable to locate global object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="对象与数组的解构、rest-操作符"><a href="#对象与数组的解构、rest-操作符" class="headerlink" title="对象与数组的解构、rest 操作符"></a>对象与数组的解构、rest 操作符</h2><h3 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h3><h3 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h3><h3 id="数组的扩展-扩展运算符"><a href="#数组的扩展-扩展运算符" class="headerlink" title="数组的扩展 扩展运算符"></a>数组的扩展 扩展运算符</h3><h2 id="函数进阶（箭头函数、默认参数）"><a href="#函数进阶（箭头函数、默认参数）" class="headerlink" title="函数进阶（箭头函数、默认参数）"></a>函数进阶（箭头函数、默认参数）</h2><h2 id="对象和数组的扩展用法"><a href="#对象和数组的扩展用法" class="headerlink" title="对象和数组的扩展用法"></a>对象和数组的扩展用法</h2><h2 id="Proxy、Reflect、Map、Set、Symbol"><a href="#Proxy、Reflect、Map、Set、Symbol" class="headerlink" title="Proxy、Reflect、Map、Set、Symbol"></a>Proxy、Reflect、Map、Set、Symbol</h2><h2 id="for…of、迭代器模式、生成器函数"><a href="#for…of、迭代器模式、生成器函数" class="headerlink" title="for…of、迭代器模式、生成器函数"></a>for…of、迭代器模式、生成器函数</h2><h2 id="ES-Modules-模块系统"><a href="#ES-Modules-模块系统" class="headerlink" title="ES Modules 模块系统"></a>ES Modules 模块系统</h2><h2 id="ES2016-ES2020（ES7-ES11）特性一览"><a href="#ES2016-ES2020（ES7-ES11）特性一览" class="headerlink" title="ES2016 - ES2020（ES7 - ES11）特性一览"></a>ES2016 - ES2020（ES7 - ES11）特性一览</h2><h2 id="新特性编译工具（Babel）的使用"><a href="#新特性编译工具（Babel）的使用" class="headerlink" title="新特性编译工具（Babel）的使用"></a>新特性编译工具（Babel）的使用</h2><h2 id="新特性的-Polyfill：CoreJS-标准库"><a href="#新特性的-Polyfill：CoreJS-标准库" class="headerlink" title="新特性的 Polyfill：CoreJS 标准库"></a>新特性的 Polyfill：CoreJS 标准库</h2><h1 id="JavaScript-异步编程"><a href="#JavaScript-异步编程" class="headerlink" title="JavaScript 异步编程"></a>JavaScript 异步编程</h1><p>JavaScript 的单线程设计<br>同步模式和异步模式的调用差异<br>回调函数的执行原理<br>Promise 异步方案的使用进阶与剖析<br>处理异步任务的任务队列和事件循环<br>JavaScript 内部的宏任务与微任务<br>ES 6 Generator 迭代器的异步应用<br>使用 Async / Await 语法糖编写扁平的异步代码</p><h1 id="TypeScript-高级编程"><a href="#TypeScript-高级编程" class="headerlink" title="TypeScript 高级编程"></a>TypeScript 高级编程</h1><h2 id="编程语言的几种不同类型系统"><a href="#编程语言的几种不同类型系统" class="headerlink" title="编程语言的几种不同类型系统"></a>编程语言的几种不同类型系统</h2><h2 id="JavaScript-自有类型系统的问题"><a href="#JavaScript-自有类型系统的问题" class="headerlink" title="JavaScript 自有类型系统的问题"></a>JavaScript 自有类型系统的问题</h2><h2 id="Flow-静态类型检查方案"><a href="#Flow-静态类型检查方案" class="headerlink" title="Flow 静态类型检查方案"></a>Flow 静态类型检查方案</h2><blockquote><p><strong><a href="https://flow.org/" target="_blank" rel="external nofollow noopener noreferrer" target_blank>Flow-JS</a></strong>静态类型检查工具，类型检查，提高代码健壮性和可阅读性，Fackbook出品的<br>Flow提供了另一个新的选项，它是一种强(静态)类型的辅助检查工具。Flow的功能是让现有的JavaScript语法可以事先作类型的声明(定义)，在开发过程中进行自动检查，当然在最后编译时，一样可以用babel工具来移除这些标记。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// @flow</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> number <span class="token operator">|</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token operator">|</span> string <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">'number'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">10</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token string">'x is boolean'</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 这一行有类型错误消息</span></code></pre><h2 id="Flow-工具的配置及相关插件的使用"><a href="#Flow-工具的配置及相关插件的使用" class="headerlink" title="Flow 工具的配置及相关插件的使用"></a>Flow 工具的配置及相关插件的使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>直接从Flow的发布页面下载可运行档案，加到计算机中的PATH(路径)，让flow指令可以在命令列窗口访问即可。</li><li>透过npm安装即可，可以安装在全局(global)或是各别项目中。下面为安装在项目中的指令:<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev flow-bin</code></pre></li></ul><pre><code>- macOS中可以使用homebrew安装:```jsmacOS中可以使用homebrew安装:brew updatebrew install flow</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>初始化项目</li></ul><p><strong>.flowconfig</strong>文档</p><pre class=" language-bash"><code class="language-bash">flow init</code></pre><ul><li>在代码文档加入要作类型检查的注释<br>一般都在代码档案的最上面一行加入，没加Flow工具是不会进行检查的，有两种格式都可以:</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// @flow</span><span class="token comment" spellcheck="true">/*@flow*/</span></code></pre><ul><li>类型检查</li></ul><pre class=" language-js"><code class="language-js">flow checknpm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>flow<span class="token operator">-</span>strip<span class="token operator">-</span>types</code></pre><h3 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h3><p>Flow用起来是的确是简单，但里面的内容很多，主要原因是是要看实际不同的使用情况作搭配。JavaScript里面的原始数据类型都有支持，而在函数、对象与一些新的ES6中的类，在搭配使用时就会比较复杂，详细的情况就请到官网文档中观看，以下只能提供一些简单的介绍说明。</p><p>原始数据类型<br>Flow支持原始数据类型，如下面的列表:</p><p>boolean<br>number<br>string<br>null<br>void<br>其中的void类型，它就是JS中的undefined类型。</p><p>其余和<strong>TypeScript一样</strong></p><h2 id="TypeScript-基本语法"><a href="#TypeScript-基本语法" class="headerlink" title="TypeScript 基本语法"></a>TypeScript 基本语法</h2><h2 id="TypeScript-高级特性（泛型、接口）"><a href="#TypeScript-高级特性（泛型、接口）" class="headerlink" title="TypeScript 高级特性（泛型、接口）"></a>TypeScript 高级特性（泛型、接口）</h2><h2 id="TypeScript-内置对象标准库"><a href="#TypeScript-内置对象标准库" class="headerlink" title="TypeScript 内置对象标准库"></a>TypeScript 内置对象标准库</h2><h2 id="TypeScript-的类型声明"><a href="#TypeScript-的类型声明" class="headerlink" title="TypeScript 的类型声明"></a>TypeScript 的类型声明</h2><h1 id="函数式编程范式"><a href="#函数式编程范式" class="headerlink" title="函数式编程范式"></a>函数式编程范式</h1><p>函数式编程的本质以及应用场景<br>如何以函数式编程风格创建应用程序<br>用简单的代码构建复杂的应用程序<br>纯函数的定义以及为什么使用纯函数<br>为什么消除和控制副作用如此重要<br>柯里化、compose、高阶函数的优点<br>不可变的数据结构<br>常见库（Lodash、Ramda.js）</p><h1 id="JavaScript-性能优化"><a href="#JavaScript-性能优化" class="headerlink" title="JavaScript 性能优化"></a>JavaScript 性能优化</h1><p>JavaScript 中的垃圾收集<br>JavaScript 内存管理<br>V8 垃圾回收机制分类<br>引用计数、标记清除、标记整理和增量标记<br>Preformance 工具的使用及注意事项<br>20 个代码层面的优化细节</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  实现防抖函数</span><span class="token comment" spellcheck="true">//  防抖 和节流都是 处理高频率事件</span><span class="token comment" spellcheck="true">//  函数防抖 一段时间触发了 重新计算时间清除事件</span><span class="token comment" spellcheck="true">//  输入框和 search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</span><span class="token comment" spellcheck="true">// window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</span><span class="token comment" spellcheck="true">//  resize 窗口大小</span><span class="token keyword">const</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个定时器</span>    <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  清除时间</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">searchList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2222'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>searchList<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  节流函数： 一段时间出发了，判断当前时间和上一次时间 大于则执行 一段时间只执行一次</span><span class="token comment" spellcheck="true">//  节流 鼠标不断点击 mousedown 监听滚动事件判断是否加载更多 throttle</span><span class="token keyword">const</span> throttle <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  获取this</span>        <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> arguments        <span class="token keyword">const</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>prev <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  加上时间戳的节流函数</span><span class="token keyword">const</span> throttles <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> prev <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> context <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">var</span> args <span class="token operator">=</span> arguments  <span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//  超过时间可以执行</span> <span class="token keyword">if</span><span class="token punctuation">(</span>now<span class="token operator">-</span>prev <span class="token operator">></span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有超过 则继续等待</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> delay<span class="token operator">-</span>prev<span class="token operator">-</span>now<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mousedown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'鼠标点击了'</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouse-over'</span><span class="token punctuation">,</span> <span class="token function">throttles</span><span class="token punctuation">(</span>mousedown<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h1 id="encodeURIComponent-函数和encodeURI-通用资源标识符"><a href="#encodeURIComponent-函数和encodeURI-通用资源标识符" class="headerlink" title="encodeURIComponent()函数和encodeURI 通用资源标识符"></a>encodeURIComponent()函数和encodeURI 通用资源标识符</h1><ul><li>encodeURIComponent() 函数可把字符串作为 URI 组件进行编码。</li></ul><p>把字符串作为URI组件进行编码<br>该方法不会对ASCII字母和数字进行编码 也不会对ASCII符号进行编码<br>其他字符也都是由ASCII进行编码的 会对一些?:/@进行编码</p><pre class=" language-ts"><code class="language-ts"><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用encodeURIComponent()对uri进行编码</span><span class="token keyword">var</span> uri <span class="token operator">=</span> <span class="token string">'https://m.zxxk.com/paper?stageId=4&amp;subjectId=10'</span><span class="token function">encodeURICompnent</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span>https</code></pre><ul><li>encodeURI</li></ul><p>把字符串作为URI进行编码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ECMAScript-新特性&quot;&gt;&lt;a href=&quot;#ECMAScript-新特性&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 新特性&quot;&gt;&lt;/a&gt;ECMAScript 新特性&lt;/h1&gt;&lt;h2 id=&quot;JavaScript-vs-ECM
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端大挑战</title>
    <link href="http://lingyunsheng.cn/archives/33441.html"/>
    <id>http://lingyunsheng.cn/archives/33441.html</id>
    <published>2020-11-13T00:56:36.000Z</published>
    <updated>2020-11-20T08:48:10.433Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端知识点大挑战</p></blockquote><h1 id="统计前端字符串出现的个数"><a href="#统计前端字符串出现的个数" class="headerlink" title="统计前端字符串出现的个数"></a>统计前端字符串出现的个数</h1><ol><li>统计字符串中每个字符的出现频率，返回一个 Object，key 为统计字符，value 为出现频率<ul><li>不限制 key 的顺序</li><li>输入的字符串参数不会为空</li><li>忽略空白字符</li></ul></li></ol><p>‘hello world’<br>{h: 1, e: 1, l: 3, o: 2, w: 1, r: 1, d: 1}</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  将字符串转成数组去除空格</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> i <span class="token operator">!==</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  创建一个{}对象</span>  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      map<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      map<span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><pre class=" language-js"><code class="language-js">Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniq <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">NaN</span> <span class="token operator">||</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span>      <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">||</span>      <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"boolean"</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      map<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      map<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>uniq <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="获取-url-参数"><a href="#获取-url-参数" class="headerlink" title="获取 url 参数"></a>获取 url 参数</h1><p>获取 url 中的参数</p><ul><li>指定参数名称，返回该参数的值 或者 空字符串</li><li>不指定参数名称，返回全部的参数对象 或者 {}</li><li>如果存在多个同名参数，则返回数组</li></ul><p><a href="http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe" target="_blank" rel="external nofollow noopener noreferrer">http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe</a> key</p><p>[1, 2, 3]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getUrlParam</span><span class="token punctuation">(</span>sUrl<span class="token punctuation">,</span> sKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sUrl <span class="token operator">||</span> <span class="token keyword">typeof</span> sUrl <span class="token operator">!==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> sKey <span class="token operator">?</span> <span class="token string">""</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> sUrl<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//     定义一个对象 键和值对应</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> objarr <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>objarr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> objarr<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hashOwnProperty</span><span class="token punctuation">(</span>objarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>objarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        obj<span class="token punctuation">[</span>objarr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sKey <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>      obj<span class="token punctuation">[</span>sKey<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">getUrlParam</span><span class="token punctuation">(</span><span class="token string">"http://www.nowcoder.com?key=1&amp;key=2&amp;key=3&amp;test=4#hehe"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="判断验证邮箱-正则表达式"><a href="#判断验证邮箱-正则表达式" class="headerlink" title="判断验证邮箱 正则表达式"></a>判断验证邮箱 正则表达式</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isAvailableEmail</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//let reg=/^\w+@[a-z0-9]+(\.[a-z]+){1,3}$/;</span>  <span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex">/^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}$/</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>sEmail<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="颜色字符串转换"><a href="#颜色字符串转换" class="headerlink" title="颜色字符串转换"></a>颜色字符串转换</h1><h1 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h1><p>如果第二个参数 bUnicode255For1 === true，则所有字符长度为 1<br>否则如果字符 Unicode 编码 &gt; 255 则长度为 2</p><p>‘hello world, 牛客’, false</p><p>17</p><p><strong>获取 unicode 编码 charCodeAt</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">strLength</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> bUnicode255For1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bUnicode255For1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        len <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        len <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">strLength</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> bUnicode255For1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>bUnicode255For1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        len <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        len <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> len<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="时间格式化"><a href="#时间格式化" class="headerlink" title="时间格式化"></a>时间格式化</h1><h1 id="dom-节点查找"><a href="#dom-节点查找" class="headerlink" title="dom 节点查找"></a>dom 节点查找</h1><h1 id="字符串驼峰命名"><a href="#字符串驼峰命名" class="headerlink" title="字符串驼峰命名"></a>字符串驼峰命名</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cssStyle2DomStyle</span><span class="token punctuation">(</span>sName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> sName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断第一个是不是-</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//  处理剩余的</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="根据包名创建对象"><a href="#根据包名创建对象" class="headerlink" title="根据包名创建对象"></a>根据包名创建对象</h1><p>根据包名，在指定空间中创建对象</p><p>namespace({a: {test: 1, b: 2}}, ‘a.b.c.d’)</p><p>{a: {test: 1, b: {c: {d: {}}}}}</p><h1 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title="合并两个有序链表"></a>合并两个有序链表</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> l1 <span class="token operator">||</span> l2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">=</span> l1<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    node <span class="token operator">=</span> l2<span class="token punctuation">;</span>    node<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mergeTwoLists<span class="token punctuation">:</span> mergeTwoLists<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  法二</span><span class="token keyword">function</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> l1 <span class="token operator">||</span> l2<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l1<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> l2<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mergeTwoLists<span class="token punctuation">:</span> mergeTwoLists<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>迭代法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>      l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>      l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>总结</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> mergeTowLinkList <span class="token operator">=</span>  <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  定义一个链表</span>    functuion <span class="token function">ListNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  定义一个空链表存储</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  当l1 l2链表都存在</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//  l1指针往后移</span>            l1<span class="token operator">=</span>l1<span class="token punctuation">.</span>next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2<span class="token operator">=</span>l2<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//  当比较赋值完之后 prev也要往后移 指向下一个</span>        prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next        <span class="token comment" spellcheck="true">//  判断当l1 或者l2为null时的指向</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span>l1<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span> prev<span class="token punctuation">.</span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="合并-k-个已排序链表"><a href="#合并-k-个已排序链表" class="headerlink" title="合并 k 个已排序链表"></a>合并 k 个已排序链表</h1><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/* * function ListNode(x){ *   this.val = x; *   this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * * @param lists ListNode类一维数组 * @return ListNode类 */</span><span class="token keyword">function</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> mergeTwoLinkList <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLinkList</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoLinkList</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">mergeTwoLinkList</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mergeKLists<span class="token punctuation">:</span> mergeKLists<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>思路： 先合并两个有序链表，然后循环 k 个有序链表 调用链表函数</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> mergeKLists <span class="token operator">=</span> <span class="token punctuation">(</span>lists<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> mergeTwoList <span class="token operator">=</span> <span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoList</span><span class="token punctuation">(</span>l1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      l2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">mergeTwoList</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> lists<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    res <span class="token operator">=</span> <span class="token function">mergeTwoList</span><span class="token punctuation">(</span>mergeTwoList<span class="token punctuation">,</span> lists<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="寻找第-k-大"><a href="#寻找第-k-大" class="headerlink" title="寻找第 k 大"></a>寻找第 k 大</h1><p>有一个整数数组，请你根据快速排序的思路，找出数组中第 K 大的数。</p><p>给定一个整数数组 a,同时给定它的大小 n 和要找的 K(K 在 1 到 n 之间)，请返回第 K 大的数，保证答案存在。</p><p>[1,3,5,2,2],5,3</p><p>2</p><p>解释：<strong>在一个数组找到第 k 大的数</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">findKth</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>  a<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a<span class="token punctuation">[</span>K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>快排思想</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">findKth</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> K<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">const</span> quickSort <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arrays <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arrays<span class="token punctuation">[</span>n <span class="token operator">-</span> K<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="合并两个有序数组-双指针法"><a href="#合并两个有序数组-双指针法" class="headerlink" title="合并两个有序数组: 双指针法**"></a>合并两个有序数组: 双指针法**</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * * @param A int整型一维数组 * @param B int整型一维数组 * @return void */</span><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> m<span class="token punctuation">,</span> B<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">let</span> l1 <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> l2 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> len <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A<span class="token punctuation">[</span>l1<span class="token punctuation">]</span> <span class="token operator">></span> B<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      A<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>l1<span class="token punctuation">]</span><span class="token punctuation">;</span>      l1<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      A<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>l2<span class="token punctuation">]</span><span class="token punctuation">;</span>      l2<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    len<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l2 <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    A<span class="token punctuation">[</span>len<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> B<span class="token punctuation">[</span>l2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  merge<span class="token punctuation">:</span> merge<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="反转数字"><a href="#反转数字" class="headerlink" title="反转数字"></a>反转数字</h1><blockquote><p>避免数字溢出 取值范围在 -2^31-1 ~ 2^31-1<br>将给出的整数 x 翻转。<br>例 1:x=123，返回 321<br>例 2:x=-123，返回-321</p></blockquote><p>你有思考过下面的这些问题么？<br>如果整数的最后一位是 0，那么输出应该是什么？比如 10,100<br>你注意到翻转后的整数可能溢出吗？假设输入是 32 位整数，则将翻转 10000000003 就会溢出，你该怎么处理这样的样例？抛出异常？这样做很好，但是如果不允许抛出异常呢？这样的话你必须重新设计函数（比如添加一个额外的参数）。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span>n <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  reverse<span class="token punctuation">:</span> reverse<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="回文链表"><a href="#回文链表" class="headerlink" title="回文链表"></a>回文链表</h1><p>[1,2,2,1]</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isPail</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> reverseListNode <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> l1 <span class="token operator">=</span> head<span class="token punctuation">;</span>    l1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> reversHead <span class="token operator">=</span> <span class="token function">reverseListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPail</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token operator">==</span> reversHead<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  迭代法</span><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> prev <span class="token operator">=</span> res<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> res<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  递归法</span><span class="token keyword">function</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token keyword">var</span> l1 <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token keyword">var</span> l2 <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">;</span>  head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> l2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* * function ListNode(x){ *   this.val = x; *   this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * * @param head ListNode类 the head * @return bool布尔型 */</span><span class="token keyword">function</span> <span class="token function">isPail</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span>    fast <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> <span class="token punctuation">{</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>slow<span class="token punctuation">.</span>val <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  isPail<span class="token punctuation">:</span> isPail<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="链表中环的入口节点"><a href="#链表中环的入口节点" class="headerlink" title="链表中环的入口节点"></a>链表中环的入口节点</h1><p>对于一个给定的链表，返回环的入口节点，如果没有环，返回 null<br>拓展：<br>你能给出不利用额外空间的解法么？</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* * function ListNode(x){ *   this.val = x; *   this.next = null; * } */</span><span class="token comment" spellcheck="true">/** * * @param head ListNode类 * @return ListNode类 */</span><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// write code here</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> hashSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    hashSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  detectCycle<span class="token punctuation">:</span> detectCycle<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">let</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  当链表有环 保存这个节点 暂时保存头节点</span>      <span class="token comment" spellcheck="true">//  当快慢指针相遇的时候 判断这个节点是否等于慢节点</span>      <span class="token keyword">let</span> circle <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>circle <span class="token operator">!==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>        circle <span class="token operator">=</span> circle<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> circle<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="字符串变形"><a href="#字符串变形" class="headerlink" title="字符串变形"></a>字符串变形</h1><p>对于一个给定的字符串，我们需要在线性(也就是O(n))的时间里对它做一些变形。首先这个字符串中包含着一些空格，就像”Hello World”一样，然后我们要做的是把着个字符串中由空格隔开的单词反序，同时反转每个字符的大小写。比如”Hello World”变形后就变成了”wORLD hELLO”。</p><p>输入描述:<br>给定一个字符串s以及它的长度n(1≤n≤500)<br>返回值描述:<br>请返回变形后的字符串。题目保证给定的字符串均由大小写字母和空格构成。</p><p>输入<br>“This is a sample”,16</p><p>输出</p><p>“SAMPLE A IS tHIS”</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">trans</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex">/^[a-z]+$/</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLocaleUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    trans <span class="token punctuation">:</span> trans<span class="token punctuation">}</span></code></pre><h1 id="将字符串转化为整数"><a href="#将字符串转化为整数" class="headerlink" title="将字符串转化为整数"></a>将字符串转化为整数</h1><p>实现函数 atoi 。函数的功能为将字符串转化为整数<br>提示：仔细思考所有可能的输入情况。这个问题没有给出输入的限制，你需要自己考虑所有可能的情况。</p><p>输入<br>“123”<br>输出<br>123</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**  *   * @param str string字符串   * @return int整型  */</span><span class="token keyword">function</span> <span class="token function">atoi</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> min <span class="token operator">=</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//      去除空格</span>    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span>min<span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> min    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    atoi <span class="token punctuation">:</span> atoi<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="判断字符串是否是回文字符串"><a href="#判断字符串是否是回文字符串" class="headerlink" title="判断字符串是否是回文字符串"></a>判断字符串是否是回文字符串</h1><p>给定一个字符串，请编写一个函数判断该字符串是否回文。如果回文请返回true，否则返回false。</p><p><strong>双指针</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">judge</span><span class="token punctuation">(</span> str <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> l <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> r <span class="token operator">=</span> str<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>            r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    judge <span class="token punctuation">:</span> judge<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="删除有序链表的重复元素二-链表去除重复元素"><a href="#删除有序链表的重复元素二-链表去除重复元素" class="headerlink" title="删除有序链表的重复元素二 链表去除重复元素"></a>删除有序链表的重复元素二 链表去除重复元素</h1><p>删除给出链表中的重复元素（链表中元素从小到大有序），使链表中的所有元素都只出现一次<br>例如：<br>给出的链表为1\to1\to21→1→2,返回1 \to 21→2.<br>给出的链表为1\to1\to 2 \to 3 \to 31→1→2→3→3,返回1\to 2 \to 31→2→3.</p><p>输入:<br>{1,1,2}<br>输出<br>{1,2}</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* * function ListNode(x){ *   this.val = x; *   this.next = null; * } */</span><span class="token comment" spellcheck="true">/**  *   * @param head ListNode类   * @return ListNode类  */</span><span class="token keyword">function</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span> head <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> current <span class="token operator">=</span> head    <span class="token keyword">let</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token keyword">while</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> current<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            current<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            next <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            current <span class="token operator">=</span> current<span class="token punctuation">.</span>next            next <span class="token operator">=</span> current <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    deleteDuplicates <span class="token punctuation">:</span> deleteDuplicates<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>思路</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deletListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  判断链表节点头节点是否为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  定义当前节点和下一个节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> head    <span class="token keyword">let</span> next <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token comment" spellcheck="true">//  当有两个节点</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  当两个节点相同</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  next指针往右移一位</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">.</span>next            next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next            next <span class="token operator">=</span> cur <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  head<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="删除链表重复元素-去重"><a href="#删除链表重复元素-去重" class="headerlink" title="删除链表重复元素 去重"></a>删除链表重复元素 去重</h1><p>给出一个升序排序的链表，删除链表中的所有重复出现的元素，只保留原链表中只出现一次的元素。<br>例如：<br>给出的链表为1 \to 2\to 3\to 3\to 4\to 4\to51→2→3→3→4→4→5, 返回1\to 2\to51→2→5.<br>给出的链表为1\to1 \to 1\to 2 \to 31→1→1→2→3, 返回2\to 32→3.</p><p>输入:<br>{1,2,2}<br>输出<br>1</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">deletListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  判断链表节点头节点是否为空</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> top <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    top<span class="token punctuation">.</span>next <span class="token operator">=</span> head    <span class="token keyword">let</span> cur <span class="token operator">=</span> top    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  如果有两个相同节点 保存这个值 判断当前的下一个指针是否重复</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> val <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val            <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span>  val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span>  top<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="查找两个节点的最近的一个共同父节点，可以包括节点自身"><a href="#查找两个节点的最近的一个共同父节点，可以包括节点自身" class="headerlink" title="查找两个节点的最近的一个共同父节点，可以包括节点自身"></a>查找两个节点的最近的一个共同父节点，可以包括节点自身</h1><blockquote><p>oNode1 和 oNode2 在同一文档中，且不会为相同的节点 判断节点是否包含</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">,</span> oNode2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>oNode1<span class="token punctuation">;</span> oNode1 <span class="token operator">=</span> oNode1<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oNode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> oNode1        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">,</span> oNode2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>oNode2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> oNode1    <span class="token punctuation">}</span>    <span class="token function">commonParentNode</span><span class="token punctuation">(</span>oNode1<span class="token punctuation">.</span>parentNode<span class="token punctuation">,</span> oNode2<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h1 id="颜色字符串转换-1"><a href="#颜色字符串转换-1" class="headerlink" title="颜色字符串转换"></a>颜色字符串转换</h1><h1 id="查找数组的位置"><a href="#查找数组的位置" class="headerlink" title="查找数组的位置"></a>查找数组的位置</h1><p>找出元素 item 在给定数组 arr 中的位置</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="最大数"><a href="#最大数" class="headerlink" title="最大数"></a>最大数</h1><p>给定一个数组由一些非负整数组成，现需要将他们进行排列并拼接，使得最后的结果最大，返回值需要是string类型 否则可能会溢出</p><p>输入<br>[30,1]<br>返回</p><p>“301”</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * 最大数 * @param nums int整型一维数组  * @return string字符串 */</span><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span> nums <span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  进行排序</span>  <span class="token comment" spellcheck="true">//  每一项都添加''</span>  <span class="token comment" spellcheck="true">//  然后比较第一个 如果两个都相等 比较后面的长度 如果长度相同 则b拼接a</span>  <span class="token comment" spellcheck="true">//  否则 a长度减去b</span>  <span class="token comment" spellcheck="true">//  如果不相等继续往下走</span>    nums<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        a<span class="token operator">=</span>a<span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">;</span>        b<span class="token operator">=</span>b<span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length<span class="token operator">==</span>b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>s<span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^0+/</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    solve <span class="token punctuation">:</span> solve<span class="token punctuation">}</span><span class="token punctuation">;</span>nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  将每一项变成字符串</span>  a <span class="token operator">=</span> a<span class="token operator">+</span><span class="token string">''</span>  b <span class="token operator">=</span> b<span class="token operator">+</span><span class="token string">''</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>length <span class="token operator">==</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> a<span class="token punctuation">.</span>length<span class="token operator">-</span>b<span class="token punctuation">.</span>length    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">+</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span>  nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^0+/</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span></code></pre><h1 id="划分链表"><a href="#划分链表" class="headerlink" title="划分链表"></a>划分链表</h1><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  链表为空 返回null</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//  创建两个空链表 小于x的放x 大于x的按照·原顺序放high链表</span>  <span class="token keyword">var</span> current <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  当前的节点</span>  <span class="token comment" spellcheck="true">//  创建小于x的链表和循环的节点</span>  <span class="token keyword">var</span> lowList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> lowCur <span class="token operator">=</span> lowList  <span class="token keyword">var</span> highList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">var</span> highCUr <span class="token operator">=</span> highList  <span class="token keyword">while</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  如果current.val &lt; x lowCur的下一个节点就是current</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>      lowCur<span class="token punctuation">.</span>next <span class="token operator">=</span> current      lowCur <span class="token operator">=</span> lowCUr<span class="token punctuation">.</span>next    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      highCUr <span class="token operator">=</span> current      highCur <span class="token operator">=</span> highCur<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    current <span class="token operator">=</span> current<span class="token punctuation">.</span>next  <span class="token punctuation">}</span>  highCur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  lowCur<span class="token punctuation">.</span>next <span class="token operator">=</span> highList<span class="token punctuation">.</span>next  <span class="token keyword">return</span> lowList<span class="token punctuation">.</span>next<span class="token punctuation">}</span></code></pre><h1 id="矩阵查找"><a href="#矩阵查找" class="headerlink" title="矩阵查找"></a>矩阵查找</h1><p><strong>循环</strong></p><pre class=" language-js"><code class="language-js">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>二分法</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**  *   * @param matrix int整型二维数组   * @param target int整型   * @return bool布尔型  */</span><span class="token keyword">function</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span> matrix <span class="token punctuation">,</span>  target <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span><span class="token comment" spellcheck="true">//      数组长度</span>    <span class="token keyword">var</span> row <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token comment" spellcheck="true">//     右上角</span>    <span class="token keyword">var</span> col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length    <span class="token comment" spellcheck="true">//  定义一维数组的x</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> row<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 二维数组的第0项</span>    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>            l<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">)</span> <span class="token punctuation">{</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    searchMatrix <span class="token punctuation">:</span> searchMatrix<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  判断数组的长度</span></code></pre><h1 id="在两个长度相等的排序数组中找上中位数"><a href="#在两个长度相等的排序数组中找上中位数" class="headerlink" title="在两个长度相等的排序数组中找上中位数"></a>在两个长度相等的排序数组中找上中位数</h1><p>给定两个有序数组arr1和arr2，已知两个数组的长度都为N，求两个数组中所有数的上中位数。<br>上中位数：假设递增序列长度为n，若n为奇数，则上中位数为第n/2+1个数；否则为第n个数<br>[要求]<br>时间复杂度为O(logN)O(logN)，额外空间复杂度为O(1)O(1)</p><p>[1,2,3,4],[3,4,5,6]<br>3</p><p>[0,1,2],[3,4,5]<br>2</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * find median in two sorted array * @param arr1 int整型一维数组 the array1 * @param arr2 int整型一维数组 the array2 * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">findMedianinTwoSortedAray</span><span class="token punctuation">(</span> arr1 <span class="token punctuation">,</span>  arr2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    findMedianinTwoSortedAray <span class="token punctuation">:</span> findMedianinTwoSortedAray<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="区间内反转链表"><a href="#区间内反转链表" class="headerlink" title="区间内反转链表"></a>区间内反转链表</h1><p>将一个链表\ m m 位置到\ n n 位置之间的区间反转，要求时间复杂度 ，空间复杂度 。<br>例如：<br>给出的链表为 1\to 2 \to 3 \to 4 \to 5 \to NULL1→2→3→4→5→NULL, ，,<br>返回 1\to 4\to 3\to 2\to 5\to NULL1→4→3→2→5→NULL.<br>注意：<br>给出的 满足以下条件：<br>1 \leq m \leq n \leq 链表长度1≤m≤n≤链表长度</p><p>输入<br>{1,2,3,4,5},2,4</p><p>输出<br>{1,4,3,2,5}<br><strong>方法一</strong></p><pre class=" language-ts"><code class="language-ts"></code></pre><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/* * function ListNode(x){ *   this.val = x; *   this.next = null; * } */</span><span class="token comment" spellcheck="true">/**  *   * @param head ListNode类   * @param m int整型   * @param n int整型   * @return ListNode类  */</span><span class="token keyword">function</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span> head <span class="token punctuation">,</span>  m <span class="token punctuation">,</span>  n <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> x        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> fast <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指针每右移一位 flag+1 代表位置</span>    <span class="token keyword">let</span> slowval <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> fastval <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>      flag <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next       <span class="token comment" spellcheck="true">// 保存m和n所在位置的节点</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slowval <span class="token operator">=</span> m      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fastval <span class="token operator">=</span> n      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> slowval <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">==</span> fastval<span class="token punctuation">)</span> <span class="token punctuation">{</span>        slow <span class="token operator">=</span> fast<span class="token punctuation">.</span>next        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    reverseBetween <span class="token punctuation">:</span> reverseBetween<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="最长括号子串的长度"><a href="#最长括号子串的长度" class="headerlink" title="最长括号子串的长度"></a>最长括号子串的长度</h1><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/**  *   * @param s string字符串   * @return int整型  */</span><span class="token keyword">function</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span> s <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  定义个个栈 s[i]推入</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>                res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i<span class="token operator">-</span>stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    longestValidParentheses <span class="token punctuation">:</span> longestValidParentheses<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>方法二</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**  *   * @param s string字符串   * @return int整型  */</span><span class="token keyword">function</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span> s <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>s<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> temp<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> tempResult<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            tempResult<span class="token operator">=</span><span class="token function">getMaxRight</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tempResult<span class="token operator">></span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token operator">=</span>tempResult<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getMaxRight</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> falg<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> left<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> right<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">==</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>            falg<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            result<span class="token operator">=</span>left<span class="token operator">+</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            falg<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    longestValidParentheses <span class="token punctuation">:</span> longestValidParentheses<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="完全二叉树的节点"><a href="#完全二叉树的节点" class="headerlink" title="完全二叉树的节点"></a>完全二叉树的节点</h1><blockquote><p>完全二叉树： 一颗深度为k而且有2^k-1个节点的二叉树</p></blockquote><p>满二叉树，所有子树都存在不为空</p><p>完全二叉树 最下层的叶子节点几种在树的左部</p><p><strong>满二叉树一定是完全二叉树</strong></p><p><strong>完全二叉树不一定是满二叉树</strong></p><blockquote><p>完全二叉树判定：</p></blockquote><p>判断一棵树是否是完全二叉树的思路</p><ul><li>如果树为空，则直接返回fasle</li><li>如果树不为空， 层序遍历二叉树</li><li>如果左右子树都不为空 遍历左右子</li><li>如果一个节点 左子树为空 右字数不为空 返回false 不是完全二叉树</li><li>如果左子树不为空 右字数为空， 或者左右子树都为空 则该树为完全二叉树</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前端知识点大挑战&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;统计前端字符串出现的个数&quot;&gt;&lt;a href=&quot;#统计前端字符串出现的个数&quot; class=&quot;headerlink&quot; title=&quot;统计前端字符串出现的个数&quot;&gt;&lt;/a&gt;统计前端字符串
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://lingyunsheng.cn/archives/10764.html"/>
    <id>http://lingyunsheng.cn/archives/10764.html</id>
    <published>2020-11-12T05:41:45.000Z</published>
    <updated>2020-11-12T07:45:28.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><blockquote><p>树的概念 二叉树</p></blockquote><h1 id="判断二叉树是否对称"><a href="#判断二叉树是否对称" class="headerlink" title="判断二叉树是否对称"></a>判断二叉树是否对称</h1><p><strong>题目描述</strong></p><p>给定一棵二叉树，判断琪是否是自身的镜像（即：是否对称）</p><p>备注：<br>希望你可以用递归和迭代两种方法解决这个问题</p><pre class=" language-js"><code class="language-js">输入<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>返回<span class="token boolean">false</span>输入<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>返回<span class="token boolean">true</span></code></pre><p><strong>迭代解法</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">isSmae</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>val <span class="token operator">!==</span>  right<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">isSame</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>left<span class="token punctuation">,</span> right<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSmae</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>right<span class="token punctuation">,</span> right<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="递归法和迭代法的区别"><a href="#递归法和迭代法的区别" class="headerlink" title="递归法和迭代法的区别"></a>递归法和迭代法的区别</h2><ul><li>递归法</li></ul><p>函数自身调用自身 并且返回结果， 递归函数自身调用自身， 递归是通过重复函数调用实现<br>重复</p><ul><li>迭代法</li></ul><p>利用变量的原值推算出变量的一个新值.如果递归是被自己调用自己的话,迭代就是A不停的调用B。</p><p>函数内某段代码实现循环</p><p>简单地说，递归是重复调用函数自身实现循环。迭代是函数内某段代码实现循环，而迭代与普通循环的区别是：循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。</p><p><strong>递归中一定有迭代，迭代不一定有递归，递归调用函数，浪费空间，容易造成堆栈的溢出</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  迭代 1-100累加</span><span class="token keyword">var</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉树&quot;&gt;&lt;a href=&quot;#二叉树&quot; class=&quot;headerlink&quot; title=&quot;二叉树&quot;&gt;&lt;/a&gt;二叉树&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;树的概念 二叉树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;判断二叉树是否对称&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript查缺补漏，快上车</title>
    <link href="http://lingyunsheng.cn/archives/37724.html"/>
    <id>http://lingyunsheng.cn/archives/37724.html</id>
    <published>2020-11-11T00:46:38.000Z</published>
    <updated>2020-11-12T03:21:32.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>“天行健，君子以自强不息”<br>一入前端深似海，回首已是社畜人，灯火阑珊处，唯有一人处</p></blockquote><img data-src="\themes\next\source\images\slide-01.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>写这篇文章的目的有两个，其一就是为了巩固总结自己学到的知识、体系化的梳理下javascript的基础和进阶语法，其二传播一下知识，日常更新</p></blockquote><h1 id="js基础知识"><a href="#js基础知识" class="headerlink" title="js基础知识"></a>js基础知识</h1><blockquote><p>javascript由三个部分组成，ECMAScript、DOM、BOM</p></blockquote><p><strong>ECMAScript</strong></p><ul><li>定义了js的语法规范</li><li>ES5——ES10</li></ul><p><strong>DOM</strong></p><ul><li>dom全程 document object model 文档对象模型</li><li>提供对应的属性和方法， 通过js操作浏览器页面的dom元素</li></ul><p><strong>BOM</strong></p><ul><li>区别于dom，BOM是浏览器的对象模型 Browser object model</li><li>提供浏览器的属性和方法</li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="创建变量的方式"><a href="#创建变量的方式" class="headerlink" title="创建变量的方式"></a>创建变量的方式</h2><ul><li>var</li><li>let</li><li>const</li><li>function</li><li>class</li><li>import/require 模块化，ES6Module和node的CommonJS规范</li></ul><h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><ul><li><p>严格遵守大小写</p></li><li><p>驼峰命名法<br>驼峰命名法： 由有意义的英文单词组成一个变量名字，第一个字母效写，第二个单词首字母大写</p></li><li><p>使用项目种常见的特殊意义，例如info,query,get等等，但是不能使用关键字和保留字</p></li><li><p>命名规则，使用标识符$/_/英文字母/数字命名<br>使用数字命名数字不能作为开头</p></li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本数据类型（值类型-原始类型）"><a href="#基本数据类型（值类型-原始类型）" class="headerlink" title="基本数据类型（值类型/原始类型）"></a>基本数据类型（值类型/原始类型）</h2><ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>Symbol </li></ul><h2 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h2><ul><li><p>对象数据类型Object(object, array, RegExp, Date, Math)</p></li><li><p>函数数据类型function</p></li></ul><h3 id="数据类型-1"><a href="#数据类型-1" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p>number类型</p></li><li><p>string类型</p></li><li><p>boolean类型</p></li><li><p>null类型</p></li><li><p>undefined类型</p></li><li><p>object类型</p></li><li><p>symbol类型</p></li><li><p>BigInt类型</p></li></ul><h3 id="判断数据类型和对象"><a href="#判断数据类型和对象" class="headerlink" title="判断数据类型和对象"></a>判断数据类型和对象</h3><h3 id="堆内存和栈内存的区别"><a href="#堆内存和栈内存的区别" class="headerlink" title="堆内存和栈内存的区别"></a>堆内存和栈内存的区别</h3><h2 id="数组及常用方法"><a href="#数组及常用方法" class="headerlink" title="数组及常用方法"></a>数组及常用方法</h2><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h2 id="字符串及其用法"><a href="#字符串及其用法" class="headerlink" title="字符串及其用法"></a>字符串及其用法</h2><h3 id="千分位转化"><a href="#千分位转化" class="headerlink" title="千分位转化"></a>千分位转化</h3><h3 id="url参数处理"><a href="#url参数处理" class="headerlink" title="url参数处理"></a>url参数处理</h3><h1 id="js进阶"><a href="#js进阶" class="headerlink" title="js进阶"></a>js进阶</h1><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><h2 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h2><h2 id="闭包机制"><a href="#闭包机制" class="headerlink" title="闭包机制"></a>闭包机制</h2><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h2 id="原型属性方法"><a href="#原型属性方法" class="headerlink" title="原型属性方法"></a>原型属性方法</h2><h2 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h2><h2 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call/apply/bind"></a>call/apply/bind</h2><h2 id="类数组和数组"><a href="#类数组和数组" class="headerlink" title="类数组和数组"></a>类数组和数组</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>高阶函数(Higher-order function)在JavaScript种，函数是“一等公民”，函数在执行的过程中，会被提升到全局顶层，函数和其他数据类型一样，可以赋值给其他变量，可以作为参数传入另一个函数或者当作其他函数的返回值,函数的参数可以接收其他的函数</p></blockquote><ul><li><p>函数赋值给变量</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">num</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre></li><li><p>函数作为参数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">num</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span></code></pre></li><li><p>函数作为返回值</p></li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//  a 返回的是一个函数</span><span class="token comment" spellcheck="true">//  将a(5) 当作变量赋值给 add 此时add是一个函数</span><span class="token comment" spellcheck="true">//  调用add的时候</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><h3 id="高阶函数满足的条件"><a href="#高阶函数满足的条件" class="headerlink" title="高阶函数满足的条件"></a>高阶函数满足的条件</h3><blockquote><p>高阶函数接收一个或多个函数作为输入，就是说一个函数或多个函数作为参数传入给另一个函数，例如map.reduce,filter，sort</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  Array.prototype.map</span><span class="token comment" spellcheck="true">/** * 参数:接受两个参数，一个是回调函数，一个是回调函数的this值(可选)。 * 其中，回调函数被默认传入三个值，依次为当前元素、当前索引、整个数组。 * 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果 * 创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果 * 对原来的数组没有影响 * */</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>val<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> newNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>index<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> item <span class="token operator">+</span> index <span class="token operator">+</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//对第一个元素，1 + 0 + 1 + 5 = 7</span>  <span class="token comment" spellcheck="true">//对第二个元素，2 + 1 + 2 + 5 = 10</span>  <span class="token comment" spellcheck="true">//对第三个元素，3 + 2 + 3 + 5 = 13</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[7, 10, 13]</span><span class="token comment" spellcheck="true">//  reduce</span><span class="token comment" spellcheck="true">//  参数: 接收两个参数，一个为回调函数，另一个为初始值。回调函数中三个默认参数，依次为积累值、当前值、整个数组。</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多个数的加和</span><span class="token keyword">let</span> newNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>preSum<span class="token punctuation">,</span>curVal<span class="token punctuation">,</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> preSum <span class="token operator">+</span> curVal<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newNums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//6</span><span class="token comment" spellcheck="true">//  filter</span><span class="token comment" spellcheck="true">// 参数: 一个函数参数。这个函数接受一个默认参数，就是当前元素。这个作为参数的函数返回值为一个布尔类型，决定元素是否保留。</span><span class="token comment" spellcheck="true">//  filter方法返回值为一个新的数组，这个数组里面包含参数里面所有被保留的项。</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 保留奇数项</span><span class="token keyword">let</span> oddNums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> item <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oddNums<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  sort 默认数字转换为字符串，然后根据字母unicode值进行升序排序，也就是根据字符串的比较规则进行升序排序。 Array.prototype 是一个高阶函数</span><span class="token comment" spellcheck="true">//  一个用于比较的函数，它有两个默认参数，分别是代表比较的两个元素。</span><span class="token keyword">let</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个比较的元素分别为a, b</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><blockquote><p>输出一个函数，就是返回值是函数，调用执行高阶函数之后，返回一个新的函数,常见的函数如debounce和throttle<strong>防抖和节流具体实现查看右侧菜单</strong></p></blockquote><h3 id="函数组合"><a href="#函数组合" class="headerlink" title="函数组合"></a>函数组合</h3><p>函数组合就是将两个或两个以上的函数组合生成一个新函数的过程：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> composeFn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><strong>函数组合作用：可以实现函数的复用</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">//  接收多个函数作为参数</span><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>funcs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><blockquote><p>柯里化(Currying)： 就是将接收多个函数作为参数的函数转化成接收单一函数作为参数的函数，并且接收余下参数而返回结果的新函数。<strong>在数学和理论计算机科学中的柯里化函数，一次只能传递一个参数。而对于 JavaScript 语言来说，在实际应用中的柯里化函数，可以传递一个或多个参数。</strong></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> abc <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> curried <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">curry</span><span class="token punctuation">(</span>abc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curried</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [1, 2, 3]</span><span class="token function">curried</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [1, 2, 3]</span><span class="token function">curried</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => [1, 2, 3]</span></code></pre><p><strong>函数柯里化可以实现参数的复用， 延时计算/运行</strong></p><h3 id="柯里化的实现"><a href="#柯里化的实现" class="headerlink" title="柯里化的实现"></a>柯里化的实现</h3><p>柯里化后的函数，接收到多个参数， 执行原函数，接收的参数不足，返回一个新函数，用来接收余下的参数</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> curry <span class="token operator">=</span> <span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token operator">=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> curried<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args2<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> a<span class="token operator">+</span>b<span class="token keyword">const</span> currySum <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token function">currySum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="缓存函数"><a href="#缓存函数" class="headerlink" title="缓存函数"></a>缓存函数</h3><blockquote><p>缓存函数是将函数的计算结果缓存起来，当下次以同样的参数调用该函数时，直接返回已缓存的结果，而无需再次执行函数。这是一种常见的以空间换时间的性能优化手段</p></blockquote><p><strong>把序列化的参数作为key，第一次调用的结果作为value，每次调用判断缓存是否存在着对应的key，有的话返回key对应的value</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  接收函数作为参数 判断调用函数的时候 是否存在</span><span class="token keyword">function</span> <span class="token function">memorize</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  存储数据对象</span>  <span class="token keyword">const</span> cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> _args <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">strigify</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>_args<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>_args<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> add <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  复杂的函数或者其他计算</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> momo <span class="token operator">=</span> <span class="token function">memorize</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token function">momo</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token number">888</span><span class="token punctuation">)</span><span class="token function">momo</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">,</span><span class="token number">888</span><span class="token punctuation">)</span></code></pre><h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><h2 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h2><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h2 id="js操作DOM节点"><a href="#js操作DOM节点" class="headerlink" title="js操作DOM节点"></a>js操作DOM节点</h2><h2 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h2><h1 id="日常面试题"><a href="#日常面试题" class="headerlink" title="日常面试题"></a>日常面试题</h1><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p>以上就是javascript的总结了，感谢各位大佬的阅读</p><blockquote><p>平时开发</p></blockquote><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><ul><li><a href="https://juejin.im/post/6892886272377880583#heading-15" target="_blank" rel="external nofollow noopener noreferrer">阿宝哥的高阶函数你不知道的事</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;“天行健，君子以自强不息”&lt;br&gt;一入前端深似海，回首已是社畜人，灯火阑珊处，唯有一人处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img data-src=&quot;\themes\next\source\images\slide-01.jpg&quot;&gt;

&lt;h1
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://lingyunsheng.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://lingyunsheng.cn/tags/javascript/"/>
    
      <category term="es" scheme="http://lingyunsheng.cn/tags/es/"/>
    
      <category term="数组" scheme="http://lingyunsheng.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="promise" scheme="http://lingyunsheng.cn/tags/promise/"/>
    
      <category term="基本数据类型" scheme="http://lingyunsheng.cn/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
      <category term="垃圾回收" scheme="http://lingyunsheng.cn/tags/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    
      <category term="闭包" scheme="http://lingyunsheng.cn/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://lingyunsheng.cn/archives/a80d0031.html"/>
    <id>http://lingyunsheng.cn/archives/a80d0031.html</id>
    <published>2020-11-10T03:37:36.000Z</published>
    <updated>2020-11-20T07:20:36.561Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="动态规划概念"><a href="#动态规划概念" class="headerlink" title="动态规划概念"></a>动态规划概念</h1><p>动态规划：是把复杂的问题分解为简单的子问题来解决复杂问题的一种方法，适用于重叠子和最优结构性质的特征</p><p>对于动态规划的学习，最重要的是找到一个正确的学习切入点：如果你是一个对相关理论一无所知的初学者，自然不能急于一上来就生吞“模型”、“状态转移方程”等高端概念——大家谨记，动态规划是一种思想，所谓思想，就是非常好用，好用到爆的套路。我们学习一种思想，重要的是建立起对它的感性认知，而不是反复咀嚼那些对现在的你来说还非常生硬的文字概念——从抽象去理解抽象是意淫，从具体去理解抽象才是学习。</p><!-- more --><h1 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h1><p>一个复杂问题，分解成若干个子问题，合并子问题得出原问题的解，并进行记忆搜索存储</p><h1 id="分治思想和动态规划的异同"><a href="#分治思想和动态规划的异同" class="headerlink" title="分治思想和动态规划的异同"></a>分治思想和动态规划的异同</h1><p>分治问题的核心思想是：把一个问题分解为相互独立的子问题，逐个解决子问题后，再组合子问题的答案，就得到了问题的最终解。</p><p>动态规划的思想和“分治”有点相似。不同之处在于，“分治”思想中，各个子问题之间是独立的：比如说归并排序中，子数组之间的排序并不互相影响。而动态规划划分出的子问题，往往是相互依赖、相互影响的。</p><p><strong>共同点</strong><br>二者都是将原问题分而治之，分解成若干个子问题，解决后合并，形成原问题的解</p><p><strong>不同点</strong></p><p>分治法，子问题是独立的，用递归方法</p><p>动态规划， 子问题之间相互有练习，有重叠部分，需要记忆存储， 迭代常用</p><h1 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a>爬楼梯</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>从“爬楼梯”问题说起<br>题目描述：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><pre class=" language-bash"><code class="language-bash">注意：给定 n 是一个正整数。示例 1：输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1 阶 + 1 阶2 阶示例 2：输入： 3输出： 3解释： 有三种方法可以爬到楼顶。</code></pre><p>1 阶 + 1 阶 + 1 阶<br>1 阶 + 2 阶<br>2 阶 + 1 阶</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>思路分析与编码实现<br>这道题目有两个关键的特征：</p><p>要求你给出达成某个目的的解法个数<br>不要求你给出每一种解法对应的具体路径<br>这样的问题，往往可以用动态规划进行求解（这个结论大家先记下来，后面我们会有很多验证它的机会）。</p><h3 id="递归思想分析"><a href="#递归思想分析" class="headerlink" title="递归思想分析"></a>递归思想分析</h3><p>Step1：递归思想分析问题<br>基于动态规划的思想来做题，我们首先要想到的思维工具就是“倒着分析问题”。“倒着分析问题”分两步走：</p><p>定位到问题的终点<br>站在终点这个视角，思考后退的可能性<br>在这道题里，“问题的终点”指的就是走到第 n 阶楼梯这个目标对应的路径数，我们把它记为 f(n)。</p><p>那么站在第 n 阶楼梯这个视角， 有哪些后退的可能性呢？按照题目中的要求，一次只能后退 1 步或者 2 步。因此可以定位到从第 n 阶楼梯只能后退到第 n-1 或者第 n-2 阶。我们把抵达第 n-1 阶楼梯对应的路径数记为f(n-1)，把抵达第 n-2 阶楼梯对应的路径数记为 f(n-2)，不难得出以下关系：</p><p>f(n) = f(n-1) + f(n-2)<br>这个关系用树形结构表示会更加形象</p><p>现在我们不难看出，要想求出 f(n)，必须求出f(n-1) 和f(n-2)（我们假设 n 是一个大于 5 的数字）。<br>接下来站在第 n-1 阶台阶上，思考后退的姿势，也无非只能是退到 n-1-1层台阶 或 n-1-2层台阶上，所以f(n-1) 和 f(n-2)、f(n-3)间同样具有以下关系：</p><p>f(n-1) = f(n-2) + f(n-3)<br>同理， f(n-2)也可以按照同样的规则进行拆分：</p><p>f(n-2) = f(n-3) + f(n-4)<br>现在我们的树结构渐渐丰满起来了：</p><p> 随着拆分的进行，一定会有一个时刻，求解到了 f(1) 或 f(2)。按照题设规则，第 1 阶楼梯只能走 1 步抵达，第 2 阶楼梯可以走 1 步或者走 2 步抵达，因此我们不难得出 f(1) 和 f(2) 的值：</p><p>f(1) = 1<br>f(2) = 2<br>我们在学习递归与回溯思想的时候，曾经给大家强调过，遇到“树形思维模型”，就要想办法往递归上靠。这道题明显用到了树形思维模型，有着明确的重复内容(不断地按照 f(n) = f(n-1) + f(n-2)的规则拆分），同时有着明确的边界条件(遇到f(1)或f(2)就可以返回了)，因此我们不难写出其对应的递归解法代码：</p><pre class=" language-bash"><code class="language-bash">/*** @param <span class="token punctuation">{</span>number<span class="token punctuation">}</span> n* @return <span class="token punctuation">{</span>number<span class="token punctuation">}</span>*/const climbStairs <span class="token operator">=</span> function<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 处理递归边界    if<span class="token punctuation">(</span>n <span class="token operator">==</span><span class="token operator">=</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> 1    <span class="token punctuation">}</span>    if<span class="token punctuation">(</span>n <span class="token operator">==</span><span class="token operator">=</span> 2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> 2    <span class="token punctuation">}</span>    // 递归计算    <span class="token keyword">return</span> climbStairs<span class="token punctuation">(</span>n-1<span class="token punctuation">)</span> + climbStairs<span class="token punctuation">(</span>n-2<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>但是这个解法问题比较大，丢进 OJ 会直接超时。我们一起来看看原因，回到我们上面这张树形结构图上来：</p><p> 这次我把 f(n-2) 和f(n-3)给标红了。大家不难看出，我们在图中对 f(n-2)和f(n-3) 进行了重复的计算。事实上，随着我们递归层级的加深，这个重复的问题会越来越严重：</p><p> （图上标红的均为发生过重复计算的结点）</p><h3 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h3><p>Step2：记忆化搜索来提效<br>重复计算带来了时间效率上的问题，要想解决这类问题，最直接的思路就是用空间换时间，也就是想办法记住之前已经求解过的结果。这里我们只需要定义一个数组：</p><pre class=" language-bash"><code class="language-bash">const f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>每计算出一个 f<span class="token punctuation">(</span>n<span class="token punctuation">)</span> 的值，都把它塞进 f 数组里。下次要用到这个值的时候，直接取出来就行了：/*** @param <span class="token punctuation">{</span>number<span class="token punctuation">}</span> n* @return <span class="token punctuation">{</span>number<span class="token punctuation">}</span>*/// 定义记忆数组 fconst f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>const climbStairs <span class="token operator">=</span> function<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  if<span class="token punctuation">(</span>n<span class="token operator">==</span>1<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> 1  <span class="token punctuation">}</span>  if<span class="token punctuation">(</span>n<span class="token operator">==</span>2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> 2  <span class="token punctuation">}</span>  // 若f<span class="token punctuation">[</span>n<span class="token punctuation">]</span>不存在，则进行计算  if<span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">=</span>undefined<span class="token punctuation">)</span>  f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> climbStairs<span class="token punctuation">(</span>n-1<span class="token punctuation">)</span> + climbStairs<span class="token punctuation">(</span>n-2<span class="token punctuation">)</span>  // 若f<span class="token punctuation">[</span>n<span class="token punctuation">]</span>已经求解过，直接返回  <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以上这种在递归的过程中，不断保存已经计算出的结果，从而避免重复计算的手法，叫做记忆化搜索。<br>对于一些实用派的面试官来说，“记忆化搜索”和“动态规划”没有区别，它们都能够以不错的效率帮我们达到同样的目的。这种情况下，上面这个答案就足够了。<br>但是还有一部分面试官，比较讲究，善于咀嚼理论概念。他会告诉你记忆化搜索和动态规划是两个东西，别想糊弄哥，哥要的是动态规划的解法。<br>行吧，就给你动态规划的解法。</p><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>Step3：记忆化搜索转化为动态规划<br>要想完成记忆化搜索与动态规划之间的转化，首先要清楚两者间的区别。<br>先说记忆化搜索，记忆化搜索可以理解为优化过后的递归。递归往往可以基于树形思维模型来做，以这道题为例：</p><p>我们基于树形思维模型来解题时，实际上是站在了一个比较大的未知数量级（也就是最终的那个n），来不断进行拆分，最终拆回较小的已知数量级（f(1)、f(2)）。这个过程是一个明显的自顶向下的过程。</p><p>动态规划则恰恰相反，是一个自底向上的过程。它要求我们站在已知的角度，通过定位已知和未知之间的关系，一步一步向前推导，进而求解出未知的值。<br>在这道题中，已知 f(1) 和 f(2) 的值，要求解未知的 f(n)，我们唯一的抓手就是这个等价关系：</p><p>f(n) = f(n-1) + f(n-2)<br>以 f(1) 和 f(2) 为起点，不断求和，循环递增 n 的值，我们就能够求出f(n)了：</p><pre class=" language-bash"><code class="language-bash">/*** @param <span class="token punctuation">{</span>number<span class="token punctuation">}</span> n* @return <span class="token punctuation">{</span>number<span class="token punctuation">}</span>*/const climbStairs <span class="token operator">=</span> function<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    // 初始化状态数组    const f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    // 初始化已知值    f<span class="token punctuation">[</span>1<span class="token punctuation">]</span> <span class="token operator">=</span> 1<span class="token punctuation">;</span>    f<span class="token punctuation">[</span>2<span class="token punctuation">]</span> <span class="token operator">=</span> 2<span class="token punctuation">;</span>    // 动态更新每一层楼梯对应的结果    for<span class="token punctuation">(</span>let i <span class="token operator">=</span> 3<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i-2<span class="token punctuation">]</span> + f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    // 返回目标值    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>以上便是这道题的动态规划解法。</p><p>从题解思路看动态规划<br>下面我们基于这个题解的过程，站在专业的角度来重新认识一下动态规划。</p><p>前面咱们在排序专题学过“分治”思想，提到了“子问题”这个概念。</p><h3 id="分治的核心思想"><a href="#分治的核心思想" class="headerlink" title="分治的核心思想"></a>分治的核心思想</h3><p>分治问题的核心思想是：把一个问题分解为相互独立的子问题，逐个解决子问题后，再组合子问题的答案，就得到了问题的最终解。</p><p>动态规划的思想和“分治”有点相似。不同之处在于，“分治”思想中，各个子问题之间是独立的：比如说归并排序中，子数组之间的排序并不互相影响。而动态规划划分出的子问题，往往是相互依赖、相互影响的。</p><h1 id="动态规划场景"><a href="#动态规划场景" class="headerlink" title="动态规划场景"></a>动态规划场景</h1><p>什么样的题应该用动态规划来做？我们要抓以下两个关键特征：</p><ul><li>最优子结构</li><li>重叠子问题<br>拿这道题的分析过程来说：</li></ul><h2 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h2><p>最优子结构，它指的是问题的最优解包含着子问题的最优解——不管前面的决策如何，此后的状态必须是基于当前状态（由上次决策产生）的最优决策。就这道题来说，f(n)和f(n-1)、f(n-2)之间的关系印证了这一点（这玩意儿叫状态转移方程，大家记一下）。</p><p>状态转移方程</p><h2 id="重叠子问题"><a href="#重叠子问题" class="headerlink" title="重叠子问题"></a>重叠子问题</h2><p>重叠子问题，它指的是在递归的过程中，出现了反复计算的情况。就这道题来说，图上标红的一系列重复计算的结点印证了这一点。<br>因此，这道题适合用动态规划来做。</p><h3 id="分析技巧"><a href="#分析技巧" class="headerlink" title="分析技巧"></a>分析技巧</h3><p>动态规划问题的分析技巧<br>现在，大家理解了动态规划的概念，明确了其“自底向上”的脑回路特征。但在实际做题过程中，“自底向上”分析问题往往不是最舒服的解题姿势，按照这个脑回路去想问题，容易拧巴。</p><p>什么姿势不拧巴？<br>递归！</p><p>你现在回过头去看看咱们前面递归+记忆化搜索那一通操作，你觉得拧巴吗？不拧巴！舒服不？相当舒服了——只要你掌握了递归与回溯，就不难分析出图上的树形思维模型和递归边界条件，树形思维模型将帮助我们更迅速地定位到状态转移关系，边界条件往往对应的就是已知子问题的解；基于树形思维模型，结合一下记忆化搜索，难么？不难，谁还不会初始化个记忆数组了呢；最后再把递归往迭代那么一转，答案不就有了么！</p><p>当然，咱们上面一通吹牛逼都只是为了衬托递归思路分析下来有多么爽，并不是说动态规划有多么简单。实际上，动态规划可复杂了，递归+记忆化搜索的思想只是帮助我们简化问题，但并不能送佛送到西。说到底，还是得靠我们自己。<br>动态规划到底复杂在什么地方，这里我先预告一下：</p><p>状态转移方程不好确定<br>已知的状态可能不明显<br>递归转迭代，一部分同学可能不知道怎么转（这个就是纯粹的编程基础问题了，多写多练哈）<br>多的也没法说了，大家后面慢慢体会吧：）。<br>总结一下，对于动态规划，笔者建议大家优先选择这样的分析路径：</p><p>递归思想明确树形思维模型：找到问题终点，思考倒退的姿势，往往可以帮助你更快速地明确状态间的关系<br>结合记忆化搜索，明确状态转移方程<br>递归代码转化为迭代表达（这一步不一定是必要的，1、2本身为思维路径，而并非代码实现。若你成长为熟手，2中分析出来的状态转移方程可以直接往循环里塞，根本不需要转换）。</p><h1 id="找硬币零钱问题KMP"><a href="#找硬币零钱问题KMP" class="headerlink" title="找硬币零钱问题KMP"></a>找硬币零钱问题KMP</h1><h2 id="“最值”型问题典范：如何优雅地找硬币"><a href="#“最值”型问题典范：如何优雅地找硬币" class="headerlink" title="“最值”型问题典范：如何优雅地找硬币"></a>“最值”型问题典范：如何优雅地找硬币</h2><p>题目描述：给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><pre class=" language-bash"><code class="language-bash">示例1：输入: coins <span class="token operator">=</span> <span class="token punctuation">[</span>1, 2, 5<span class="token punctuation">]</span>, amount <span class="token operator">=</span> 11输出: 3解释: 11 <span class="token operator">=</span> 5 + 5 + 1示例2：输入: coins <span class="token operator">=</span> <span class="token punctuation">[</span>2<span class="token punctuation">]</span>, amount <span class="token operator">=</span> 3输出: -1</code></pre><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> clac <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  初始化数组</span>    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">//  提前定义</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 遍历[1, amount]区间硬币的总额</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//  定义最小值</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">Infinity</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  硬币金额小于总额</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">==</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>提示：最值问题是动态规划的常见对口题型，见到最值问题，应该想到动态规划<br>思路分析<br>现在思维工具已经给到大家了，详细的步骤我就不啰嗦了。我直接讲难点：这道题对于初学者来说，难的是状态转移方程的明确。</p><p>要明确状态转移关系，我们依然是借助“倒推”的思想：解决爬楼梯问题时，我们首先思考的是站在第 n 阶楼梯上的后退姿势。这道题也一样，我们需要思考的是站在 amount 这个组合结果上的“后退姿势”—— 我们可以假装此时手里已经有了 36 美分，只是不清楚硬币的个数，把“如何凑到36”的问题转化为“如何从36减到0”的问题。</p><p>硬币的英文是 coin，因此我们这里用 c1、c2、c3……cn 分别来表示题目中给到我们的第 1-n 个硬币。现在我如果从 36 美分的总额中拿走一个硬币，那么有以下几种可能：</p><p>拿走 c1<br>拿走 c2<br>拿走 c3<br>……<br>拿走 cn<br>重复往前推导这个“拿走”的过程，我们可以得到以下的树形思维模型：</p><p>假如用 f(x）表示每一个总额数字对应的最少硬币数，那么我们可以得到以下的对应关系：</p><p>f(36) = Math.min(f(36-c1)+1,f(36-c2)+1,f(36-c3)+1……f(36-cn)+1)<br>这套对应关系，就是本题的状态转移方程。</p><p>找出了状态转移方程，我们接下来需要思考的是递归的边界条件：在什么情况下，我的“后退”（实际是做减法）可以停下来？这里需要考虑的是硬币总额为 0 的情况，这种情况对应的硬币个数毫无疑问也会是 0，因而不需要任何的回溯计算。由此我们就得到了一个已知的最基本的子问题的结果：</p><p>f[0] = 0<br>现在，明确了状态转移方程，明确了已知子问题的解，我们来写代码：</p><p>编码实现</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> coinChange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于保存每个目标总额对应的最小硬币个数</span>    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 提前定义已知情况</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 遍历 [1, amount] 这个区间的硬币总额</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>amount<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 求的是最小值，因此我们预设为无穷大，确保它一定会被更小的数更新</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">Infinity</span>        <span class="token comment" spellcheck="true">// 循环遍历每个可用硬币的面额</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若硬币面额小于目标总额，则问题成立</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 状态转移方程</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token operator">-</span>coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若目标总额对应的解为无穷大，则意味着没有一个符合条件的硬币总数来更新它，本题无解，返回-1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token operator">===</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 若有解，直接返回解的内容</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="跳台阶问题"><a href="#跳台阶问题" class="headerlink" title="跳台阶问题"></a>跳台阶问题</h1><h2 id="递归解法斐波那契数列"><a href="#递归解法斐波那契数列" class="headerlink" title="递归解法斐波那契数列"></a>递归解法斐波那契数列</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> fibonaqi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  n个台阶， 对一次跳1、2、3、5、8</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  当n>=3时</span>    <span class="token keyword">return</span> <span class="token function">fibonaqi</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonaqi</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="记忆搜索法"><a href="#记忆搜索法" class="headerlink" title="记忆搜索法"></a>记忆搜索法</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//  定义一个数组 初始化</span><span class="token keyword">const</span> f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> fibonaqi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  n个台阶， 对一次跳1、2、3、5、8</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//  当n>=3时</span>    <span class="token comment" spellcheck="true">//  判断fibonaqi(n) 是否已经计算保存过了</span>    <span class="token comment" spellcheck="true">//  记住已经求解过的结果</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> undefined<span class="token punctuation">)</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fibonaqi</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">fibonaqi</span><span class="token punctuation">(</span>n<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h2><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> fobonaqi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  定义一个初始化数组</span>    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//  定义1 2</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>列出状态转移方程，出现反复计算的结果。</p><h1 id="背包模型"><a href="#背包模型" class="headerlink" title="背包模型"></a>背包模型</h1><p><strong>题目</strong><br>有 n 件物品，物品体积用一个名为 w 的数组存起来，物品的价值用一个名为 value 的数组存起来；每件物品的体积用 w[i] 来表示，每件物品的价值用 value[i] 来表示。现在有一个容量为 c 的背包，问你如何选取物品放入背包，才能使得背包内的物品总价值最大？</p><p>注意：每种物品都只有1件</p><h2 id="暴力枚举法"><a href="#暴力枚举法" class="headerlink" title="暴力枚举法"></a>暴力枚举法</h2><h2 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h2><h1 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h1><h1 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h1><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">LCS</span><span class="token punctuation">(</span> str1 <span class="token punctuation">,</span>  str2 <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span>length <span class="token operator">></span> str2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">[</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>str2<span class="token punctuation">,</span> str1<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">let</span> maxlen <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> str1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token operator">-</span>maxlen<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token operator">-</span>maxlen<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            maxlen <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    LCS <span class="token punctuation">:</span> LCS<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h1><h1 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h1><h1 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h1><h1 id="字符串最长无重复子串"><a href="#字符串最长无重复子串" class="headerlink" title="字符串最长无重复子串"></a>字符串最长无重复子串</h1><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** *  * @param arr int整型一维数组 the array * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">maxLength</span><span class="token punctuation">(</span> arr <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> str <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>len<span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>len<span class="token operator">-</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> j<span class="token operator">+</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token operator">+</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span>i<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">-</span> i            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    maxLength <span class="token punctuation">:</span> maxLength<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="把数字翻译成字符串"><a href="#把数字翻译成字符串" class="headerlink" title="把数字翻译成字符串"></a>把数字翻译成字符串</h1><blockquote><p>有一种将字母编码成数字的方式：’a’-&gt;1, ‘b-&gt;2’, … , ‘z-&gt;26’。现在给一串数字，返回有多少种可能的译码结果<br>输入<br>“12”<br>输出<br>2</p></blockquote><p>输入<br>“31717126241541717”<br>输出<br>192</p><p>16+15+14+13+12+11+10+<br><strong>分析</strong>：列出状态转移方程</p><p>12 对应 当a-&gt; 1 b-&gt; 1  或者l=12</p><p>如果有0 则返回0 </p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 解码 * @param nums string字符串 数字串 * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">solve</span><span class="token punctuation">(</span> nums <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nums <span class="token operator">||</span> <span class="token operator">!</span>nums<span class="token punctuation">.</span>length <span class="token operator">||</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//      定义数组保存1-26的</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">let</span> maxlen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span><span class="token number">26</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    solve <span class="token punctuation">:</span> solve<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="买卖股票的最好时机"><a href="#买卖股票的最好时机" class="headerlink" title="买卖股票的最好时机"></a>买卖股票的最好时机</h1><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">/** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * 两次交易所能获得的最大收益 * @param prices int整型一维数组 股票每一天的价格 * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span> prices <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span>length    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 前i次最多只能交易一笔</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保留一个最小值 第一天 比较两天的差价 选一个最大的值推入到dp[]</span>    <span class="token comment" spellcheck="true">// 最小的值就是prices[i], minv</span>    <span class="token comment" spellcheck="true">// 返回dp【】的最后一个</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> minv<span class="token operator">=</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>        minv <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> minv<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">module</span><span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    maxProfit <span class="token punctuation">:</span> maxProfit<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="买卖股票的最好机会-两次最大收益"><a href="#买卖股票的最好机会-两次最大收益" class="headerlink" title="买卖股票的最好机会 两次最大收益"></a>买卖股票的最好机会 两次最大收益</h1><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可 * 两次交易所能获得的最大收益 * @param prices int整型一维数组 股票每一天的价格 * @return int整型 */</span><span class="token keyword">function</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span> prices <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> first_hold <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> second_hold <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> first_sell <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> second_sell <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            first_hold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>first_hold<span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            first_sell <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>first_sell<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> first_hold<span class="token punctuation">)</span><span class="token punctuation">;</span>            second_hold <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second_hold<span class="token punctuation">,</span> first_sell <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            second_sell <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>second_sell<span class="token punctuation">,</span> second_hold <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> second_sell<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    maxProfit <span class="token punctuation">:</span> maxProfit<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>经过本节的讲解，相信大家已经对动态规划的概念和通用解题模板有了掌握。但仅仅依靠这些，可能还不足以支撑起你全部的底气——动态规划问题千姿百态，有着繁多的题型分支。在下一节，我们就将围绕这些分支中考察频率最高的一部分，提取出通用的解题模型，帮助大家更进一步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h1 id=&quot;动态规划概念&quot;&gt;&lt;a href=&quot;#动态规划概念&quot; class=&quot;headerlink&quot; title=&quot;动态规划概念&quot;&gt;&lt;/a&gt;动态规划概念&lt;/h1&gt;&lt;p&gt;动态规划：是把复杂的问题分解为简单的子问题来解决复杂问题的一种方法，适
      
    
    </summary>
    
    
      <category term="数据结构与算法" scheme="http://lingyunsheng.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法， 动态规划" scheme="http://lingyunsheng.cn/tags/%E7%AE%97%E6%B3%95%EF%BC%8C-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>前端总结</title>
    <link href="http://lingyunsheng.cn/archives/d5357d7d.html"/>
    <id>http://lingyunsheng.cn/archives/d5357d7d.html</id>
    <published>2020-11-09T02:11:54.000Z</published>
    <updated>2020-11-10T08:57:55.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端工程化"><a href="#前端工程化" class="headerlink" title="前端工程化"></a>前端工程化</h1><p>本文转载于掘金<a href="https://juejin.im/post/6892003555818143752#comment" target="_blank" rel="external nofollow noopener noreferrer">https://juejin.im/post/6892003555818143752#comment</a></p><p>前端搭建要经历技术选型，代码风格规范，测试，部署等环节<br>开发工具： VSCode</p><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>技术选型：前端三大框架，Vue、React、Angular<br>选型注意两点：</p><ul><li>技术成熟的，用的人多，技术社区生态完整，有了bug好解决</li><li>市场占有率高的<img data-src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/62b7a34ed09e4f5ba2aec46ed7c54de8~tplv-k3u1fbpfcp-watermark.image"><img data-src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c78b05aa770e4b6f8f553879eaa0dc02~tplv-k3u1fbpfcp-watermark.image"></li></ul><p>UI组件库：</p><ul><li>AntDesign Vue</li><li>Vant</li><li>AntDesign react</li><li>taroUI</li><li>bootstrap</li></ul><h1 id="统一规范"><a href="#统一规范" class="headerlink" title="统一规范"></a>统一规范</h1><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>先来看看统一代码规范的好处：</p><p>规范的代码可以促进团队合作<br>规范的代码可以降低维护成本<br>规范的代码有助于 code review（代码审查）<br>养成代码规范的习惯，有助于程序员自身的成长</p><p>当团队的成员都严格按照代码规范来写代码时，可以保证每个人的代码看起来都像是一个人写的，看别人的代码就像是在看自己的代码。更重要的是我们能够认识到规范的重要性，并坚持规范的开发习惯。</p><h2 id="git规范"><a href="#git规范" class="headerlink" title="git规范"></a>git规范</h2><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h1 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h1><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h1 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端工程化&quot;&gt;&lt;a href=&quot;#前端工程化&quot; class=&quot;headerlink&quot; title=&quot;前端工程化&quot;&gt;&lt;/a&gt;前端工程化&lt;/h1&gt;&lt;p&gt;本文转载于掘金&lt;a href=&quot;https://juejin.im/post/6892003555818143752
      
    
    </summary>
    
    
      <category term="前端工程化" scheme="http://lingyunsheng.cn/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
  </entry>
  
  <entry>
    <title>微信小程序转uni-app</title>
    <link href="http://lingyunsheng.cn/archives/5ab8cddf.html"/>
    <id>http://lingyunsheng.cn/archives/5ab8cddf.html</id>
    <published>2020-11-05T05:03:31.000Z</published>
    <updated>2020-11-11T05:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先安装一个将微信小程序 转换成 uni-app 的插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g miniprogram-to-uniapp// 转化成 uniapp$ wtu -i ./miniprogram-project// vant$ wtu -i ./miniprogram-to-uniapp -z// 将wxss合并 vue文件$ wtu -i /miniprogram-project -m </code></pre><h1 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h1><p><strong>uni-app</strong>是一个使用vue开发前端框架,多端框架,一套代码可以发布到IOS\Android\web等等平台</p><h1 id="创建uni-app"><a href="#创建uni-app" class="headerlink" title="创建uni-app"></a>创建uni-app</h1><ul><li>使用<a href="https://www.dcloud.io/hbuilderx.html" target="_blank" rel="external nofollow noopener noreferrer">HBuilderX</a>可视化界面</li><li>vue-cli命令行</li></ul><p><strong>环境安装</strong></p><ul><li>全局安装vue-cli</li></ul><pre class=" language-js"><code class="language-js">npm install <span class="token operator">-</span>g @vue<span class="token operator">/</span>cli</code></pre><ul><li>创建uni-app</li></ul><pre class=" language-js"><code class="language-js">vue create <span class="token operator">-</span>p dcloudio<span class="token operator">/</span>uni<span class="token operator">-</span>preset<span class="token operator">-</span>vue my<span class="token operator">-</span>projectvue create <span class="token operator">-</span><span class="token punctuation">[</span> dcloudio<span class="token operator">/</span>uni<span class="token operator">-</span>preset<span class="token operator">-</span>vue#alpha my<span class="token operator">-</span>alpha<span class="token operator">-</span>project</code></pre><ul><li>运行 发布uni-app</li></ul><pre class=" language-js"><code class="language-js">npm run devnpm run build</code></pre><p>各端需要的规则:</p><p>比如H5端的浏览器有跨域限制；<br>比如微信小程序会强制要求https链接，并且所有要联网的服务器域名都要配到微信的白名单中；<br>比如App端，iOS对隐私控制和虚拟支付控制非常严格；<br>比如App端，Android、国产rom各种兼容性差异，尤其是因为谷歌服务被墙，导致的push、定位等开发混乱的坑；<br>如果你的App要使用三方sdk，比如定位、地图、支付、推送…还要遵循他们的规则和限制；</p><h1 id="框架简介"><a href="#框架简介" class="headerlink" title="框架简介"></a>框架简介</h1><p><strong>uni-app</strong> 使用vue的语法+小程序的标签和API</p><h2 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h2><ul><li>页面文件遵循单文件SFC规范</li><li>组件标签靠近小程序规范</li><li>接口能力JS API靠近小程序规范 ,wx替换 <strong>uni</strong></li><li>数据绑定及事件处理通 vue.js规范,增加页面的生命周期</li><li>多端运行, 使用flex布局开发</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class=" language-bash"><code class="language-bash">┌─cloudfunctions        云函数目录（阿里云为aliyun，腾讯云为tcb，详见uniCloud）│─components            符合vue组件规范的uni-app组件目录│  └─comp-a.vue         可复用的a组件├─hybrid                存放本地网页的目录，详见├─platforms             存放各平台专用页面的目录，详见├─pages                 业务页面文件存放的目录│  ├─index│  │  └─index.vue       index页面│  └─list│     └─list.vue        list页面├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此├─wxcomponents          存放小程序组件的目录，详见├─main.js               Vue初始化入口文件├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期├─manifest.json         配置应用名称、appid、logo、版本等打包信息，详见└─pages.json            配置页面路由、导航条、选项卡等页面类信息，详见</code></pre><p><strong>注意</strong></p><ul><li>static静态资源文件 放置图片</li><li>css文件放在common文件</li></ul><h2 id="资源路径-静态资源"><a href="#资源路径-静态资源" class="headerlink" title="资源路径 静态资源"></a>资源路径 静态资源</h2><blockquote><p>template内引入静态资源,如**image\video等标签的src属性,可以使用相对路径或者<br>绝对路径</p></blockquote><p><strong>@</strong>指的是根目录</p><pre class=" language-HTML"><code class="language-HTML"><!-- 绝对路径，/static指根目录下的static目录，在cli项目中/static指src目录下的static目录 --><image class="logo" src="/static/logo.png"></image><image class="logo" src="@/static/logo.png"></image><!-- 相对路径 --><image class="logo" src="../../static/logo.png"></image></code></pre><blockquote><p>js文件或script标签内（包括renderjs等）引入js文件时，可以使用相对路径和绝对路径，形式如下</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 绝对路径，@指向项目根目录，在cli项目中@指向src目录</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'@/common/add.js'</span><span class="token comment" spellcheck="true">// 相对路径</span><span class="token keyword">import</span> add <span class="token keyword">from</span> <span class="token string">'../../common/add.js'</span></code></pre><blockquote><p>css文件或style标签内引入css文件时（scss、less文件同理），可以使用相对路径或绝对路径（HBuilderX 2.6.6-alpha）</p></blockquote><pre class=" language-CSS"><code class="language-CSS">@import url('@/common/uni.css')/* 相对路径 */@import url('../../common/uni.css');</code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><ul><li>onLaunch<br>uni-app初始化完成时触发(全局只触发一次)</li><li>onShow<br>当uni-app启动,从后台进入前台显示</li><li>onHide<br> 当uni-app 从前台进入后台显示</li><li>onError<br> 报错显示</li><li>onUniNViewMessage<br>对 nvue 页面发送的数据进行监听，可参考 nvue 向 vue 通讯</li><li>onUnhandledRejection<br> 对未处理的 Promise 拒绝事件监听函数（2.8.1+）</li><li>onPageNotFound<br>页面不存在监听函数</li><li>onThemeChange<br>监听系统主题变化</li></ul><p><strong>应用生命周期仅可在App.vue中监听，在其它页面监听无效</strong></p><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><ul><li>onLoad<br>监听页面加载，其参数为上个页面传递的数据，参数类型为Object</li><li>onShow<br>监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面<br>…参考小程序的生命周期<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2>uni-app页面路由为框架统一管理，开发者需要在<strong>pages.json</strong>里配置每个路由页面的路径及页面样式。类似小程序在app.json中配置页面路由一样。所以 uni-app 的路由用法与 Vue Router 不同，如仍希望采用 Vue Router 方式管理路由，可在插件市场搜索 Vue-Router。</li></ul><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>两种页面路由跳转方式: 使用navigator组件跳转\调用API跳转</p><ul><li>uni.navigateTo <navigator open-type="navigate"></navigator></li><li>重定向 uni.redirectTo <navigator open-type="redirectTo"></navigator></li><li>返回 uni.navigetBack <navigator open-type="navigateBack"></navigator></li><li>Tab切换   uni.switchTab <navigator open-type="switchTab"></navigator></li><li>uni.reLaunch <navigator open-type="reLauch"></navigator></li></ul><h2 id="生产环境和开发环境"><a href="#生产环境和开发环境" class="headerlink" title="生产环境和开发环境"></a>生产环境和开发环境</h2><p>不管是vue/还是uni-app,配置生产环境和开发环境,都是借助<strong>process.env.NODE_ENV</strong><br>判断当前环境是开发环境还是生产环境。一般用于连接测试服务器或生产服务器的动态切换</p><p>在HBuilderX 中，点击“运行”编译出来的代码是开发环境，点击“发行”编译出来的代码是生产环境</p><p><strong>配置在vue.config.ts</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'开发环境'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'生产环境'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="样式和布局"><a href="#样式和布局" class="headerlink" title="样式和布局"></a>样式和布局</h2><p><strong>uni-app</strong>支持的样式:px,rpx</p><p>若设计稿宽度为 750px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 750，结果为：100rpx。<br>若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 640，结果为：117rpx。<br>若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在 uni-app 里面的宽度应该设为：750 * 200 / 375，结果为：400rpx。</p><p><strong>设计稿 1px / 设计稿基准宽度 = 框架样式 1rpx / 750rpx</strong></p><p><strong>750 * 元素在设计稿中的宽度 / 设计稿基准宽度</strong></p><h2 id="template和block"><a href="#template和block" class="headerlink" title="template和block"></a>template和block</h2><p>uni-app 支持在 template 模板中嵌套 <template> 和 <block>，用来进行 列表渲染 和 条件渲染。</block></template></p><p><template> 和 <block> 并不是一个组件，它们仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</block></template></p><p><block> 在不同的平台表现存在一定差异，推荐统一使用 <template>。</template></block></p><pre class=" language-HTML"><code class="language-HTML"><template>    <view>        <template v-if="test">            <view>test 为 true 时显示</view>        </template>        <template v-else>            <view>test 为 false 时显示</view>        </template>    </view></template><template>    <view>        <block v-for="(item,index) in list" :key="index">            <view>{{item}} - {{index}}</view>        </block>    </view></template></code></pre><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><p>uni-app 在支持绝大部分 ES6 API 的同时，也支持了 ES7 的 await/async。</p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>uni-app支持使用npm安装第三方包。</p><ul><li>初始化npm工程 npm init -y</li><li>安装依赖 npm install packageName –save</li><li>使用<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token keyword">package</span> <span class="token keyword">from</span> <span class="token string">'packageName'</span><span class="token keyword">const</span> <span class="token keyword">package</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'packageName'</span><span class="token punctuation">)</span></code></pre></li></ul><p>为多端兼容考虑，建议优先从 uni-app插件市场 获取插件。直接从 npm 下载库很容易只兼容H5端。</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>类型定义文件由 @dcloudio/types 模块提供，安装后请注意配置 tsconfig.json 文件中的 compilerOptions &gt; types 部分，如需其他小程序平台类型定义也可以安装，如：miniprogram-api-typings、mini-types。对于缺少或者错误的类型定义，可以自行在本地新增或修改并同时报告给官方请求更新。</p><p><strong>在 vue 文件的 script 节点声明 lang=”ts”</strong></p><h2 id="WXS"><a href="#WXS" class="headerlink" title="WXS"></a>WXS</h2><blockquote><p>WXS是一套运行在视图层的脚本语言,特点是运行在视图层,当需要避免逻辑层和渲染层交互通信折损时采用wxs</p></blockquote><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先安装一个将微信小程序 转换成 uni-app 的插件&lt;/p&gt;
&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span cl
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://lingyunsheng.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="uni-app" scheme="http://lingyunsheng.cn/tags/uni-app/"/>
    
      <category term="小程序， 多端" scheme="http://lingyunsheng.cn/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%8C-%E5%A4%9A%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端今日学习</title>
    <link href="http://lingyunsheng.cn/archives/b2df75d3.html"/>
    <id>http://lingyunsheng.cn/archives/b2df75d3.html</id>
    <published>2020-11-05T03:51:58.000Z</published>
    <updated>2020-11-10T08:58:00.251Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="学习" scheme="http://lingyunsheng.cn/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>双十一活动页面总结</title>
    <link href="http://lingyunsheng.cn/archives/3192c71d.html"/>
    <id>http://lingyunsheng.cn/archives/3192c71d.html</id>
    <published>2020-10-23T03:18:57.000Z</published>
    <updated>2020-11-05T03:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 style="text-align:center">双十一活动M端</h1><p>从十月到现在一直在忙双十一活动，现在复盘回忆一下，整体的开发和学习到的地方以及，有哪些需要优化改进的地方<br>可以点击链接查看具体活动详情页面<a href="http://m.zxxk.com/activity/20201111" target="_blank" rel="external nofollow noopener noreferrer">点击</a></p><h1 style="text-align:center">css移动端适配</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 style=&quot;text-align:center&quot;&gt;双十一活动M端&lt;/h1&gt;


&lt;p&gt;从十月到现在一直在忙双十一活动，现在复盘回忆一下，整体的开发和学习到的地方以及，有哪些需要优化改进的地方&lt;br&gt;可以点击链接查看具体活动详情页面&lt;a href=&quot;http://m.zx
      
    
    </summary>
    
    
      <category term="前端" scheme="http://lingyunsheng.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="活动页" scheme="http://lingyunsheng.cn/tags/%E6%B4%BB%E5%8A%A8%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>预处理器</title>
    <link href="http://lingyunsheng.cn/archives/64e805a8.html"/>
    <id>http://lingyunsheng.cn/archives/64e805a8.html</id>
    <published>2020-04-05T03:14:58.000Z</published>
    <updated>2020-04-06T03:15:49.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="css" scheme="http://lingyunsheng.cn/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>js深入浅出</title>
    <link href="http://lingyunsheng.cn/archives/7448dd44.html"/>
    <id>http://lingyunsheng.cn/archives/7448dd44.html</id>
    <published>2019-07-26T02:36:13.000Z</published>
    <updated>2019-07-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><blockquote><p>本文章是js必备的基本知识</p></blockquote><p>1、js事件机制e.target和e.currentTarget区别</p><p>target是指当前触发事件的DOM元素，里面的盒子</p><p>currentTarget是 引用事件侦听器正在监听的DOM元素， 外面的盒子</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>ul class<span class="token operator">=</span><span class="token string">"todo-list"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>li class<span class="token operator">=</span><span class="token string">"item"</span><span class="token operator">></span>click<span class="token operator">&lt;</span>/li<span class="token operator">></span><span class="token operator">&lt;</span>/ul<span class="token operator">></span>const list <span class="token operator">=</span> document.querySelector<span class="token punctuation">(</span><span class="token string">'.todo-list'</span><span class="token punctuation">)</span>list.addEventListener<span class="token punctuation">(</span><span class="token string">'click'</span>, e<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console.log<span class="token punctuation">(</span>e.target<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#    &lt;li class="item">click&lt;/li></span>    console.log<span class="token punctuation">(</span>e.currentTarget<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;ul class="todo-list"></span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;js&quot;&gt;&lt;a href=&quot;#js&quot; class=&quot;headerlink&quot; title=&quot;js&quot;&gt;&lt;/a&gt;js&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文章是js必备的基本知识&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、js事件机制e.target和e.cur
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://lingyunsheng.cn/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://lingyunsheng.cn/tags/javascript/"/>
    
      <category term="js" scheme="http://lingyunsheng.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>路由在前端有什么特殊意义</title>
    <link href="http://lingyunsheng.cn/archives/dcb458b8.html"/>
    <id>http://lingyunsheng.cn/archives/dcb458b8.html</id>
    <published>2019-05-27T03:16:19.000Z</published>
    <updated>2020-04-01T03:16:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><pre class=" language-bash"><code class="language-bash">负责响应网络资源的服务，当浏览器地址栏中url发生变化，会请求网络资源，处理这种服务就叫做路由早期服务端处理，演变成路由模块前端控制，前后端分离和单页应用基石，请看深入理解路由路由解释路由<span class="token punctuation">(</span>routing<span class="token punctuation">)</span>就是通过互联的网络把信息从源地址传输到目的地址的活动路由中有一个非常重要的概念叫路由表路由表本质上就是一个映射表, 决定了数据包的指向路由器路由器提供了两种机制: 路由和转送.路由是决定数据包从来源到目的地的路径转送将输入端的数据转移到合适的输出端路由是根据不同的ur地址展示不同的内容或页面<span class="token punctuation">;</span>路由是一个比较广义和抽象的概念, 路由的本质就是对应关系</code></pre><p>路由，早期整个HTML页面都是由服务器来渲染的，服务器直接将渲染好对应的HTML页面，响应给客户端展示</p><p>浏览器每次url变化 向服务器发出请求 刷新页面， 前后端不分离 维护难度大</p><p>前端路由：ajax出现 前后端分离， 后端提供API，前端渲染数据</p><p>单页面框架SPA：</p><p>SPA是 single page web application 的简称, 译为单页Web应用简单说 SPA 就是一个 web 项目只有一个 html 页面, 一旦页面加载完成, SPA 不会因为用户的操作进行页面的重新加载或跳转取而代之的是利用 JS 动态的变换 html 的内容, 从而模拟多个视图间跳转<br>单页面富应用 (SPA)</p><p>其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由也就是前端来维护一套路由规则</p><h3 id="路由的两种实现方式"><a href="#路由的两种实现方式" class="headerlink" title="路由的两种实现方式"></a>路由的两种实现方式</h3><h4 id="hash路由"><a href="#hash路由" class="headerlink" title="hash路由"></a>hash路由</h4><p>hash值变化不会触发浏览器发送请求<br>hash值就是url“#”后面的内容， location.href独写hash值<br>监听路由变化，window对象的hashchange事件，占用hash值，默认页面滚动失效，需调用BOM</p><h4 id="historty路由"><a href="#historty路由" class="headerlink" title="historty路由"></a>historty路由</h4><p>html5提供的history对象<br>history对象的两个方法pushState()和history.replaceState()在页面不刷新操作浏览器历史记录<br>两个区别：新增历史记录与直接替换的区别<br>监听url变化，通过popstate来实现，手动触发页面渲染，无法拦截默认请求</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"en"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>  <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>title<span class="token operator">></span>window.history路由<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"routerLink"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"historyChange('home')"</span><span class="token operator">></span>首页<span class="token punctuation">(</span>history<span class="token punctuation">)</span>/button<span class="token operator">></span>          <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"historyChange('about')"</span><span class="token operator">></span>关于<span class="token punctuation">(</span>history<span class="token punctuation">)</span><span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"hashChange('home')"</span><span class="token operator">></span>首页<span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token operator">&lt;</span>/button<span class="token operator">></span>        <span class="token operator">&lt;</span>button onclick<span class="token operator">=</span><span class="token string">"hashChange('about')"</span><span class="token operator">></span>关于<span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token operator">&lt;</span>/button<span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"routerView"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>/div<span class="token operator">></span>    <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span>-- 2.创建子视图模板 --<span class="token operator">></span>  <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"home"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>hello,我是首页<span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/template<span class="token operator">></span>  <span class="token operator">&lt;</span>template id<span class="token operator">=</span><span class="token string">"about"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>hello,我是关于<span class="token operator">&lt;</span>/div<span class="token operator">></span>  <span class="token operator">&lt;</span>/template<span class="token operator">></span>  <span class="token operator">&lt;</span>script<span class="token operator">></span>    //1.首先创建路由表    const routerTable <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path: <span class="token string">'home'</span>,        component: <span class="token string">'#home'</span>      <span class="token punctuation">}</span>,      <span class="token punctuation">{</span>        path: <span class="token string">'about'</span>,        component: <span class="token string">'#about'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>    //*********** 方式一：window.history **************    //3.（window.history）监听路由更改，根据新路由path加载对应的内容    <span class="token keyword">function</span> historyChange<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      render<span class="token punctuation">(</span><span class="token punctuation">{</span> path: path <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    //添加popstate状态监听    window.addEventListener<span class="token punctuation">(</span><span class="token string">'popstate'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        render<span class="token punctuation">(</span><span class="token punctuation">{</span> path: e.state, isPush: <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    //************** 方式二：location.hash ***************    <span class="token keyword">function</span> hashChange<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>      render<span class="token punctuation">(</span><span class="token punctuation">{</span> path: path, mode: <span class="token string">'hash'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    //添加hashchange监听    window.addEventListener<span class="token punctuation">(</span><span class="token string">'hashchange'</span>, <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> path <span class="token operator">=</span> location.hash      //path移除开始的<span class="token comment" spellcheck="true">#</span>      render<span class="token punctuation">(</span><span class="token punctuation">{</span> path: path.substring<span class="token punctuation">(</span>1, path.length - 2<span class="token punctuation">)</span>, mode: <span class="token string">'hash'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    //**************公共方法*******************    //渲染方法    <span class="token keyword">function</span> render<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      //默认值，mode默认为history，isPush<span class="token operator">=</span>true，isReplace<span class="token operator">=</span>false,path<span class="token operator">=</span>home      data <span class="token operator">=</span> Object.assign<span class="token punctuation">(</span><span class="token punctuation">{</span> mode: <span class="token string">'history'</span>, isPush: true, isReplace: false, path: <span class="token string">'home'</span> <span class="token punctuation">}</span>, data<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data.path<span class="token punctuation">)</span> <span class="token punctuation">{</span>        //查询路由信息        const route <span class="token operator">=</span> routerTable.find<span class="token punctuation">(</span>p <span class="token operator">=</span><span class="token operator">></span> p.path <span class="token operator">==</span> data.path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>data.mode <span class="token operator">==</span> <span class="token string">'history'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data.isPush<span class="token punctuation">)</span> <span class="token punctuation">{</span>              //更改url---后退、前进不更改              <span class="token keyword">if</span> <span class="token punctuation">(</span>data.isReplace<span class="token punctuation">)</span> <span class="token punctuation">{</span>                window.history.replaceState<span class="token punctuation">(</span>data.path, <span class="token string">''</span>, data.path<span class="token punctuation">)</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                window.history.pushState<span class="token punctuation">(</span>data.path, <span class="token string">''</span>, data.path<span class="token punctuation">)</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data.mode <span class="token operator">==</span> <span class="token string">'hash'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            location.hash <span class="token operator">=</span> data.path          <span class="token punctuation">}</span>          //更新html          document.querySelector<span class="token punctuation">(</span><span class="token string">"#routerView"</span><span class="token punctuation">)</span>.innerHTML <span class="token operator">=</span> document.querySelector<span class="token punctuation">(</span>route.component<span class="token punctuation">)</span>.innerHTML        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token operator">&lt;</span>/script<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是路由&quot;&gt;&lt;a href=&quot;#什么是路由&quot; class=&quot;headerlink&quot; title=&quot;什么是路由&quot;&gt;&lt;/a&gt;什么是路由&lt;/h3&gt;&lt;pre class=&quot; language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;负责响应网
      
    
    </summary>
    
    
      <category term="前端框架" scheme="http://lingyunsheng.cn/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://lingyunsheng.cn/tags/vue/"/>
    
      <category term="react" scheme="http://lingyunsheng.cn/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lingyunsheng.cn/archives/16107.html"/>
    <id>http://lingyunsheng.cn/archives/16107.html</id>
    <published>2019-02-05T03:15:49.000Z</published>
    <updated>2019-02-05T03:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external nofollow noopener noreferrer">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external nofollow noopener noreferrer">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external nofollow noopener noreferrer">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external nofollow noopener noreferrer">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external nofollow noopener noreferrer">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external nofollow noopener noreferrer">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external nofollow noopener noreferrer">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="external nofollow noopener noreferrer">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external nofollow noopener noreferrer&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>css总结</title>
    <link href="http://lingyunsheng.cn/archives/5aa0734.html"/>
    <id>http://lingyunsheng.cn/archives/5aa0734.html</id>
    <published>2019-02-05T03:15:49.000Z</published>
    <updated>2019-02-05T03:15:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css新特性"><a href="#css新特性" class="headerlink" title="css新特性"></a>css新特性</h2><p>CSS3<br>    三大特性<br>        覆盖性<br>        继承性<br>        优先级<br>            基本选择器<br>                ID选择器<br>                类选择器<br>                标签选择器<br>                属性选择器<br>            伪类选择器<br>                结构伪类<br>                伪元素<br>            组合选择器<br>                相邻元素选择器<br>                兄弟选择器<br>                子选择器<br>                后代选择器<br>    属性<br>        transform<br>        transition<br>        animation<br>        box-shadow/text-shadow<br>    常见问题<br>        nth-child和nth-of-type<br>        css三大特性<br>            层叠性<br>                css样式冲突<br>                css样式冲突采取的原则，后者覆盖前者<br>            继承性<br>                继承性的样式<br>            常见选择器的叠加值<br>        div宽度100% 设置属性margin-left和margin-right的问题<br>        过渡transition不能给z-index非过渡属性<br>        开启了性能加速的属性<br>        flex：0 1 25%<br>        BFC、IFC</p><h1 id="红色区域的面积"><a href="#红色区域的面积" class="headerlink" title="红色区域的面积"></a>红色区域的面积</h1><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>   <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>   <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>   <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>   <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">20</span>px solid <span class="token hexcode">#fff</span><span class="token punctuation">;</span>   <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>   <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>   <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 当是默认的content-box width： 180px height: 160px width就是内容的宽高，不包含padding border*/</span><span class="token comment" spellcheck="true">/* 当是border-box时候: width:60px height: 40px width包含padding border */</span></code></pre><pre class=" language-HTML"><code class="language-HTML"><div class="box"></div></code></pre><h1 id="背景虚化"><a href="#背景虚化" class="headerlink" title="背景虚化"></a>背景虚化</h1><!-- 背景虚化可以使用filter属性 --><p>filter：blur(0.5)</p><h1 id="translate-3D-有什么用"><a href="#translate-3D-有什么用" class="headerlink" title="translate:3D 有什么用"></a>translate:3D 有什么用</h1><p><strong>translate3d()</strong>在3D空间内移动一个元素的位置，有三个矢量位置，x，y，z</p><p>translate3d(tx,ty,tz) 代表立体空间三维向量x，y，z的位置左边 <strong>z轴的值不能是百分比</strong></p><ul><li>GPU硬加速</li><li>css动画</li></ul><p>变换 -y 就是往上 y就是往下变换</p><h1 id="css盒模型-box-sizing"><a href="#css盒模型-box-sizing" class="headerlink" title="css盒模型 box-sizing"></a>css盒模型 box-sizing</h1><p>css盒模型由四块组成： 外边距margin border边框 内边距padding 和content组成 可以设置 min-height max-height box-sizing：border-box背景可以设置 background-clip</p><p>box-sizing: content-box</p><p>width = width + 2padding + 2border</p><p>contentWidth = width</p><p>box-sizing:border-box</p><p>contentWidth = width-2padding-2border</p><h1 id="块级格式化上下文-BFC-和IFC-行级格式化上下文"><a href="#块级格式化上下文-BFC-和IFC-行级格式化上下文" class="headerlink" title="块级格式化上下文 BFC 和IFC 行级格式化上下文"></a>块级格式化上下文 BFC 和IFC 行级格式化上下文</h1><blockquote><p><strong>块级格式化上下文（Block Formatting Context， BFC）</strong>是在页面中一个独立的容器，容器里的元素与容器外的元素互不影响，在一个Web页面的CSS渲染中，块级格式化上下文 (Block Formatting Context)是按照块级盒子布局的。W3C对BFC的定义如下：</p></blockquote><p>浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</p><p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个 BFC 中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><p><strong>垂直的沿着父元素的边框排列</strong></p><h2 id="创建块级格式化上下文"><a href="#创建块级格式化上下文" class="headerlink" title="创建块级格式化上下文"></a>创建块级格式化上下文</h2><ul><li>根元素HTML</li><li>浮动元素： float：none</li><li>绝对定位元素： posistion为 absolute和fiexed</li><li>行内块元素 display：inline-block</li><li>表格元素 display：table-cell 和 display：table-caption table-row inline-table</li><li>overflow不为visible</li><li>display：flex或者 display：grid inline-flex inline-grid</li></ul><p><strong>块级格式化上下文</strong>发生的场景</p><ul><li>浮动定位 清除浮动</li><li>垂直边距排列</li><li>边距重叠</li><li>计算高度时，浮动元素也会参与计算</li><li>独立的容器</li></ul><p><strong>作用</strong></p><ul><li>防止边距重叠margin折叠<ul><li>计算规则<ul><li>两个相邻的外边距都是正数，选大的值</li><li>都是负数 两个绝对值的大数</li><li>一正一负，两者相加的和<br>产生折叠的必备条件：margin必须是邻接的!</li></ul></li></ul></li></ul><pre class=" language-CSS"><code class="language-CSS">// html<div class="outer">  <p>I am paragraph one and I have a margin top and bottom of 20px;</p>  <p>I am paragraph one and I have a margin top and bottom of 20px;</p></div>// css.outer {  background-color: #ccc;  margin: 0 0 40px 0;  overflow:auto;}p {  padding: 0;  margin: 20px 0 20px 0;  background-color: rgb(233,78,119);  color: #fff;}</code></pre><ul><li>阻止元素被浮动覆盖 典型案例 文字环绕效果</li></ul><pre class=" language-HTML"><code class="language-HTML"><div class="outer">  <div class="float">I am a floated element.</div>  <div>  I am text inside a div nested inside the outer box. If there is enough text then the text will wrap around the floated element. The border on the outer will then wrap around the text.  </div></div><div class="outer">  <div class="float">I am a floated element.</div>  <div class="text">  I am text inside a div nested inside the outer box. I have overflow auto which makes me a BFC and therefore I do not wrap.  </div></div></code></pre><pre class=" language-CSS"><code class="language-CSS">* { box-sizing: border-box; }body {  margin: 40px;  background-color: #fff;  color: #444;  font: 1.4em Arial, sans-serif;}.outer {  border: 5px dotted rgb(214,129,137);  border-radius: 5px;  width: 450px;  padding: 10px;  margin-bottom: 40px;}.float {  padding: 10px;  border: 5px solid rgba(214,129,137,.4);  border-radius: 5px;  background-color: rgba(233,78,119,.4);  color: #fff;  float: left;    width: 200px;  margin: 0 20px 0 0;}.text {  overflow: auto;}</code></pre><ul><li>多列布局 两栏布局 三栏布局</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;css新特性&quot;&gt;&lt;a href=&quot;#css新特性&quot; class=&quot;headerlink&quot; title=&quot;css新特性&quot;&gt;&lt;/a&gt;css新特性&lt;/h2&gt;&lt;p&gt;CSS3&lt;br&gt;    三大特性&lt;br&gt;        覆盖性&lt;br&gt;        继承性&lt;br&gt;    
      
    
    </summary>
    
    
      <category term="css" scheme="http://lingyunsheng.cn/categories/css/"/>
    
    
      <category term="css" scheme="http://lingyunsheng.cn/tags/css/"/>
    
  </entry>
  
</feed>
